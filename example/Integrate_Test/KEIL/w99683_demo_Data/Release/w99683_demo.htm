<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\w99683_demo_Data\Release\w99683_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\w99683_demo_Data\Release\w99683_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Sep 02 11:46:12 2016
<BR><P>
<H3>Maximum Stack Usage =       3800 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_move &rArr; fs_fat_rename_file &rArr; generate_short_name &rArr; fs_fat_get_next_dir_entry &rArr; __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[51]">Vector_Table</a>
 <LI><a href="#[32]">Reset_Go</a>
 <LI><a href="#[161]">sys_flush_and_clean_dcache</a>
 <LI><a href="#[1fe]">sysSetupCP15</a>
 <LI><a href="#[33]">Undefined_Handler</a>
 <LI><a href="#[34]">SWI_Handler1</a>
 <LI><a href="#[35]">Prefetch_Handler</a>
 <LI><a href="#[36]">Abort_Handler</a>
 <LI><a href="#[37]">IRQ_Handler</a>
 <LI><a href="#[38]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[161]">sys_flush_and_clean_dcache</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[161]">sys_flush_and_clean_dcache</a><BR>
 <LI><a href="#[12b]">usb_check_support</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12b]">usb_check_support</a><BR>
 <LI><a href="#[10d]">USB_DisconnectDevice</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10d]">USB_DisconnectDevice</a><BR>
 <LI><a href="#[18b]">fsSetFileSize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">fsOpenFile</a><BR>
 <LI><a href="#[33]">Undefined_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">Undefined_Handler</a><BR>
 <LI><a href="#[34]">SWI_Handler1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34]">SWI_Handler1</a><BR>
 <LI><a href="#[35]">Prefetch_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">Prefetch_Handler</a><BR>
 <LI><a href="#[36]">Abort_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">Abort_Handler</a><BR>
 <LI><a href="#[37]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">IRQ_Handler</a><BR>
 <LI><a href="#[38]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">FIQ_Handler</a><BR>
 <LI><a href="#[1b2]">parse_partition_records</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b2]">parse_partition_records</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">Abort_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[38]">FIQ_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[37]">IRQ_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[6d]">JpegDecHeaderComplete</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[95]">MassStotrageConnection</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[3a]">MassStotrageDisconnection</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[35]">Prefetch_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[32]">Reset_Go</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[34]">SWI_Handler1</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[49]">UMAS_AtapiCommand</a> from umasprotocol.o(.text) referenced from umasdriver.o(.text)
 <LI><a href="#[47]">UMAS_BulkReset</a> from umastransport.o(.text) referenced from umasdriver.o(.text)
 <LI><a href="#[46]">UMAS_BulkTransport</a> from umastransport.o(.text) referenced from umasdriver.o(.text)
 <LI><a href="#[44]">UMAS_CbReset</a> from umastransport.o(.text) referenced from umasdriver.o(.text)
 <LI><a href="#[43]">UMAS_CbTransport</a> from umastransport.o(.text) referenced from umasdriver.o(.text)
 <LI><a href="#[42]">UMAS_CbiIrq</a> from umastransport.o(.text) referenced from umasdriver.o(.text)
 <LI><a href="#[45]">UMAS_CbiTransport</a> from umastransport.o(.text) referenced from umasdriver.o(.text)
 <LI><a href="#[4a]">UMAS_Qic157Command</a> from umasprotocol.o(.text) referenced from umasdriver.o(.text)
 <LI><a href="#[48]">UMAS_TransparentScsiCommand</a> from umasprotocol.o(.text) referenced from umasdriver.o(.text)
 <LI><a href="#[4b]">UMAS_UfiCommand</a> from umasprotocol.o(.text) referenced from umasdriver.o(.text)
 <LI><a href="#[33]">Undefined_Handler</a> from wb_init.o(WB_INIT) referenced from wb_init.o(WB_INIT)
 <LI><a href="#[11]">W99683Cam_Disconnect</a> from w99683.o(.text) referenced 2 times from w99683.o(.data)
 <LI><a href="#[10]">W99683Cam_Probe</a> from w99683.o(.text) referenced 2 times from w99683.o(.data)
 <LI><a href="#[17]">WB_Interrupt_Shell</a> from wb_aic.o(.text) referenced 124 times from wb_aic.o(.data)
 <LI><a href="#[29]">__fclose</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[2c]">__fget_stat</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[30]">__find_close</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[2e]">__find_first</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[2f]">__find_next</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[31]">__fioctl</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[26]">__fopen</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[27]">__fread</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[2b]">__fseek</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[2d]">__fset_stat</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[2a]">__fsizing</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[28]">__fwrite</a> from nvtfat_fop.o(.text) referenced 2 times from nvtfat_fop.o(.data)
 <LI><a href="#[21]">_delfile</a> from nvtfat_ldisk.o(.text) referenced 2 times from nvtfat_ldisk.o(.data)
 <LI><a href="#[22]">_mkdir</a> from nvtfat_ldisk.o(.text) referenced 2 times from nvtfat_ldisk.o(.data)
 <LI><a href="#[24]">_move</a> from nvtfat_ldisk.o(.text) referenced 4 times from nvtfat_ldisk.o(.data)
 <LI><a href="#[50]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[23]">_rmdir</a> from nvtfat_ldisk.o(.text) referenced 2 times from nvtfat_ldisk.o(.data)
 <LI><a href="#[4f]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[25]">_volume_label</a> from nvtfat_ldisk.o(.text) referenced 2 times from nvtfat_ldisk.o(.data)
 <LI><a href="#[13]">hub_disconnect</a> from hub.o(.text) referenced 2 times from hub.o(.data)
 <LI><a href="#[14]">hub_ioctl</a> from hub.o(.text) referenced 2 times from hub.o(.data)
 <LI><a href="#[3f]">hub_irq</a> from hub.o(.text) referenced from hub.o(.text)
 <LI><a href="#[12]">hub_probe</a> from hub.o(.text) referenced 2 times from hub.o(.data)
 <LI><a href="#[d5]">jpegISR</a> from jpegcodec.o(.text) referenced from jpegcodec.o(.text)
 <LI><a href="#[39]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[41]">ohci_irq</a> from usb-ohci.o(.text) referenced from usb.o(.text)
 <LI><a href="#[18]">sohci_alloc_dev</a> from usb-ohci.o(.text) referenced 2 times from usb-ohci.o(.data)
 <LI><a href="#[19]">sohci_free_dev</a> from usb-ohci.o(.text) referenced 2 times from usb-ohci.o(.data)
 <LI><a href="#[1a]">sohci_get_current_frame_number</a> from usb-ohci.o(.text) referenced 2 times from usb-ohci.o(.data)
 <LI><a href="#[1b]">sohci_submit_urb</a> from usb-ohci.o(.text) referenced 2 times from usb-ohci.o(.data)
 <LI><a href="#[1c]">sohci_unlink_urb</a> from usb-ohci.o(.text) referenced 2 times from usb-ohci.o(.data)
 <LI><a href="#[16]">storage_disconnect</a> from umasdriver.o(.text) referenced 2 times from umasdriver.o(.data)
 <LI><a href="#[15]">storage_probe</a> from umasdriver.o(.text) referenced 2 times from umasdriver.o(.data)
 <LI><a href="#[16a]">sysClockDiv</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[167]">sysClockSwitch</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[15d]">sysFiqHandler</a> from wb_aic.o(.text) referenced from wb_aic.o(.text)
 <LI><a href="#[163]">sysInitDDR</a> from wb_config.o(.text) referenced from wb_config.o(.text)
 <LI><a href="#[15c]">sysIrqHandler</a> from wb_aic.o(.text) referenced from wb_aic.o(.text)
 <LI><a href="#[4c]">sysTimerISR</a> from wb_timer.o(.text) referenced 2 times from wb_timer.o(.text)
 <LI><a href="#[4d]">sysUartISR</a> from wb_uart.o(.text) referenced 2 times from wb_uart.o(.text)
 <LI><a href="#[1d]">umas_disk_init</a> from umasscsiglue.o(.text) referenced 2 times from umasscsiglue.o(.data)
 <LI><a href="#[20]">umas_disk_ioctl</a> from umasscsiglue.o(.text) referenced 2 times from umasscsiglue.o(.data)
 <LI><a href="#[1e]">umas_disk_read</a> from umasscsiglue.o(.text) referenced 2 times from umasscsiglue.o(.data)
 <LI><a href="#[1f]">umas_disk_write</a> from umasscsiglue.o(.text) referenced 2 times from umasscsiglue.o(.data)
 <LI><a href="#[40]">usb_api_blocking_completion</a> from usb.o(.text) referenced from usb.o(.text)
 <LI><a href="#[f]">usb_kbd_disconnect</a> from usb_keyboard.o(.text) referenced 2 times from usb_keyboard.o(.data)
 <LI><a href="#[3b]">usb_kbd_irq</a> from usb_keyboard.o(.text) referenced from usb_keyboard.o(.text)
 <LI><a href="#[3c]">usb_kbd_led</a> from usb_keyboard.o(.text) referenced from usb_keyboard.o(.text)
 <LI><a href="#[e]">usb_kbd_probe</a> from usb_keyboard.o(.text) referenced 2 times from usb_keyboard.o(.data)
 <LI><a href="#[4e]">usb_stor_blocking_completion</a> from umastransport.o(.text) referenced from umastransport.o(.text)
 <LI><a href="#[3d]">usbvideo_IsocIrq</a> from w99683.o(.text) referenced from w99683.o(.text)
 <LI><a href="#[3e]">vpostISR</a> from w55fa93_vpost_driver.o(.text) referenced from w55fa93_vpost_driver.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[51]"></a>Vector_Table</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[32]"></a>Reset_Go</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector_Table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[52]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Go
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[55]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[264]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[265]"></a>__decompress</STRONG> (ARM, 96 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[266]"></a>__decompress2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[56]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[267]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[57]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[245]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via BLX)
</UL>

<P><STRONG><a name="[59]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[5b]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[268]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[62]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via BLX)
</UL>

<P><STRONG><a name="[269]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[5d]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[26a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[26b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[26c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[26d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[26e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[26f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[270]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[271]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[272]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[273]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[274]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[275]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[276]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[277]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[278]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[279]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[27a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[27b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[27c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[66]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via BLX)
</UL>

<P><STRONG><a name="[27d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[27e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[27f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[280]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[281]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[282]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[54]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[283]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[61]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via BLX)
</UL>

<P><STRONG><a name="[284]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[63]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[285]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[247]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[65]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via BLX)
</UL>

<P><STRONG><a name="[286]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[67]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[287]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[69]"></a>intToStr</STRONG> (ARM, 132 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = intToStr
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecTest
</UL>

<P><STRONG><a name="[6b]"></a>initVPost4test</STRONG> (ARM, 72 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = initVPost4test &rArr; vpostLCMInit &rArr; vpostLCMInit_HANNSTAR_HSD043I9W1 &rArr; vpostAllocVABuffer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>JpegDecHeaderComplete</STRONG> (ARM, 280 bytes, Stack size 64 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = JpegDecHeaderComplete &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetInfo
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>JpegEncTest</STRONG> (ARM, 544 bytes, Stack size 64 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = JpegEncTest &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegWait
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetInfo
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegClose
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess
</UL>

<P><STRONG><a name="[77]"></a>GetJpegImage</STRONG> (ARM, 212 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683_GetFramePiece
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Compare
</UL>

<P><STRONG><a name="[7f]"></a>copy_file</STRONG> (ARM, 452 bytes, Stack size 64 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpegImage
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
</UL>

<P><STRONG><a name="[83]"></a>Test</STRONG> (ARM, 348 bytes, Stack size 192 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteFile
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpegImage
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Compare
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BLX)
</UL>

<P><STRONG><a name="[87]"></a>Isochronous_Test</STRONG> (ARM, 740 bytes, Stack size 184 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Open
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_IsStreaming
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_IsConnected
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_CheckIrqEvent
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpegImage
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntegrationTest
</UL>

<P><STRONG><a name="[8f]"></a>IntegrationTest</STRONG> (ARM, 120 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDiskFreeSpace
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBKeyboardInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDriver
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
</UL>

<P><STRONG><a name="[95]"></a>MassStotrageConnection</STRONG> (ARM, 80 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = MassStotrageConnection &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>MassStotrageDisconnection</STRONG> (ARM, 60 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = MassStotrageDisconnection &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>JpegDecTest</STRONG> (ARM, 1220 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = JpegDecTest &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegWait
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetInfo
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegClose
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via BLX)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess
</UL>

<P><STRONG><a name="[99]"></a>PenDriverAccess</STRONG> (ARM, 1124 bytes, Stack size 320 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = PenDriverAccess &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileSize
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecTest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via BLX)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverConnectTest
</UL>

<P><STRONG><a name="[9b]"></a>PenDriverConnectTest</STRONG> (ARM, 200 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = PenDriverConnectTest &rArr; PenDriverAccess &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umass_register_disconnect
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umass_register_connect
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDiskFreeSpace
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDriver
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_CheckIrqEvent
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>main</STRONG> (ARM, 540 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = main &rArr; PenDriverConnectTest &rArr; PenDriverAccess &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUartPort
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetTimerReferenceClock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAssignDriveNumber
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_PortInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverConnectTest
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initVPost4test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[68]"></a>_sys_exit</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit (via BLX)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[25a]"></a>_ttywrch</STRONG> (ARM, 8 bytes, Stack size 0 bytes, standalone.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display (via BLX)
</UL>

<P><STRONG><a name="[258]"></a>__user_initial_stackheap</STRONG> (ARM, 44 bytes, Stack size 32 bytes, standalone.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ad]"></a>USBKeyboardLED</STRONG> (ARM, 104 bytes, Stack size 16 bytes, usb_keyboard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SubmitUrb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[ae]"></a>USBKeyboardOpen</STRONG> (ARM, 40 bytes, Stack size 8 bytes, usb_keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBKeyboardOpen &rArr; USB_SubmitUrb
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SubmitUrb
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_probe
</UL>

<P><STRONG><a name="[af]"></a>USBKeyboardClose</STRONG> (ARM, 20 bytes, Stack size 8 bytes, usb_keyboard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UnlinkUrb
</UL>

<P><STRONG><a name="[92]"></a>USBKeyboardInit</STRONG> (ARM, 20 bytes, Stack size 8 bytes, usb_keyboard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RegisterDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntegrationTest
</UL>

<P><STRONG><a name="[288]"></a>W99683_HasImageQueued</STRONG> (ARM, 120 bytes, Stack size 0 bytes, w99683.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>W99683_GetFramePiece</STRONG> (ARM, 408 bytes, Stack size 24 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpegImage
</UL>

<P><STRONG><a name="[8d]"></a>W99683Cam_IsStreaming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
</UL>

<P><STRONG><a name="[bd]"></a>W99683Cam_StartDataPump</STRONG> (ARM, 416 bytes, Stack size 24 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SubmitUrb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Open
</UL>

<P><STRONG><a name="[bf]"></a>W99683Cam_StopDataPump</STRONG> (ARM, 396 bytes, Stack size 8 bytes, w99683.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = W99683Cam_StopDataPump &rArr; W99683Cam_DropFrameQueue &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_DropFrameQueue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UnlinkUrb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Disconnect
</UL>

<P><STRONG><a name="[8c]"></a>W99683Cam_Open</STRONG> (ARM, 280 bytes, Stack size 8 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeUrb
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateUrb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_StartDataPump
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_SetupOnOpen
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_DropFrameQueue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
</UL>

<P><STRONG><a name="[8b]"></a>W99683Cam_IsConnected</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
</UL>

<P><STRONG><a name="[89]"></a>W99683Cam_Init</STRONG> (ARM, 60 bytes, Stack size 8 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RegisterDriver
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
</UL>

<P><STRONG><a name="[cd]"></a>W99683Cam_Exit</STRONG> (ARM, 40 bytes, Stack size 8 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeregisterDriver
</UL>

<P><STRONG><a name="[74]"></a>jpegInit</STRONG> (ARM, 192 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecTest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
</UL>

<P><STRONG><a name="[d9]"></a>jpegGetDimension</STRONG> (ARM, 40 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[d8]"></a>jpegSetDimension</STRONG> (ARM, 28 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[d7]"></a>jpegSetScalingFactor</STRONG> (ARM, 288 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[cf]"></a>jpegCalScalingFactor</STRONG> (ARM, 672 bytes, Stack size 48 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jpegCalScalingFactor &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[d6]"></a>jpegGetDecodedDimension</STRONG> (ARM, 32 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegISR
</UL>

<P><STRONG><a name="[d5]"></a>jpegISR</STRONG> (ARM, 2032 bytes, Stack size 56 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = jpegISR &rArr; jpegCalScalingFactor &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetDecodedDimension
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetScalingFactor
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDimension
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetDimension
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> jpegcodec.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>jpegWait</STRONG> (ARM, 64 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecTest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
</UL>

<P><STRONG><a name="[289]"></a>jpegIsReady</STRONG> (ARM, 32 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>jpegGetInfo</STRONG> (ARM, 28 bytes, Stack size 8 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpegGetInfo &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecTest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecHeaderComplete
</UL>

<P><STRONG><a name="[28a]"></a>jpegPower</STRONG> (ARM, 56 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>jpegOpen</STRONG> (ARM, 360 bytes, Stack size 48 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = jpegOpen &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSystemClock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecTest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
</UL>

<P><STRONG><a name="[e2]"></a>jpegSetEncodeMode</STRONG> (ARM, 392 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[e1]"></a>jpegSetDecodeMode</STRONG> (ARM, 240 bytes, Stack size 0 bytes, jpegcodec.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[de]"></a>jpegDecodeTrigger</STRONG> (ARM, 172 bytes, Stack size 8 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jpegDecodeTrigger &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[df]"></a>jpegEncodeTrigger</STRONG> (ARM, 876 bytes, Stack size 32 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = jpegEncodeTrigger &rArr; jpegCalScalingFactor &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetScalingFactor
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDimension
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetDimension
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[28b]"></a>jpegGetScalingFactor</STRONG> (ARM, 88 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>jpegSetWindowDecode</STRONG> (ARM, 80 bytes, Stack size 12 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = jpegSetWindowDecode
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[e4]"></a>jpegAdjustQTAB</STRONG> (ARM, 76 bytes, Stack size 8 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpegAdjustQTAB
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[e0]"></a>jpegSetQTAB</STRONG> (ARM, 472 bytes, Stack size 20 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jpegSetQTAB
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegIoctl
</UL>

<P><STRONG><a name="[70]"></a>jpegIoctl</STRONG> (ARM, 1380 bytes, Stack size 32 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = jpegIoctl &rArr; jpegEncodeTrigger &rArr; jpegCalScalingFactor &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetQTAB
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegAdjustQTAB
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetWindowDecode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecodeTrigger
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDecodeMode
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetEncodeMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegSetDimension
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecTest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecHeaderComplete
</UL>

<P><STRONG><a name="[76]"></a>jpegClose</STRONG> (ARM, 36 bytes, Stack size 8 bytes, jpegcodec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jpegClose
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecTest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
</UL>

<P><STRONG><a name="[28c]"></a>jpegPollInt</STRONG> (ARM, 40 bytes, Stack size 0 bytes, jpegcodec.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>vpostLCMInit</STRONG> (ARM, 28 bytes, Stack size 16 bytes, w55fa93_vpost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vpostLCMInit &rArr; vpostLCMInit_HANNSTAR_HSD043I9W1 &rArr; vpostAllocVABuffer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initVPost4test
</UL>

<P><STRONG><a name="[e7]"></a>vpostLCMDeinit</STRONG> (ARM, 12 bytes, Stack size 8 bytes, w55fa93_vpost.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMDeinit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[28d]"></a>vpostGetFrameBuffer</STRONG> (ARM, 12 bytes, Stack size 0 bytes, w55fa93_vpost.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>vpostSetFrameBuffer</STRONG> (ARM, 36 bytes, Stack size 0 bytes, w55fa93_vpost.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>LCDDelay</STRONG> (ARM, 60 bytes, Stack size 8 bytes, w55fa93_vpost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCDDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[100]"></a>vpostVAStartTrigger</STRONG> (ARM, 24 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[f3]"></a>vpostVAStopTrigger</STRONG> (ARM, 24 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMDeinit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[28f]"></a>vpostVAStartTrigger_MPUContinue</STRONG> (ARM, 88 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>vpostVAStartTrigger_MPUSingle</STRONG> (ARM, 88 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>vpostVAStopTriggerMPU</STRONG> (ARM, 24 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>vpostClearVABuffer</STRONG> (ARM, 60 bytes, Stack size 8 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vpostClearVABuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABuffer
</UL>

<P><STRONG><a name="[ec]"></a>vpostAllocVABuffer</STRONG> (ARM, 168 bytes, Stack size 16 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = vpostAllocVABuffer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostClearVABuffer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_pointer
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[fd]"></a>vpostAllocVABufferFromAP</STRONG> (ARM, 44 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[ed]"></a>vpostFreeVABuffer</STRONG> (ARM, 60 bytes, Stack size 8 bytes, w55fa93_vpost_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMDeinit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[292]"></a>vpostSetLCDEnable</STRONG> (ARM, 72 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>vpostSetLCDConfig</STRONG> (ARM, 68 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>vpostsetLCM_TimingType</STRONG> (ARM, 56 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[f6]"></a>vpostSetLCM_TypeSelect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[294]"></a>vpostSetSerialSyncLCM_Interface</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>vpostSetSerialSyncLCM_ColorOrder</STRONG> (ARM, 56 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>vpostSetSerialSyncLCM_CCIR656ModeSelect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>vpostSetParalelSyncLCM_Interface</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[fe]"></a>vpostSetFrameBuffer_DataType</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[297]"></a>vpostSetFrameBuffer_BaseAddress</STRONG> (ARM, 16 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>vpostSetYUVEndianSelect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[f4]"></a>vpostSetDataBusPin</STRONG> (ARM, 416 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[f9]"></a>vpostSetSyncLCM_HTiming</STRONG> (ARM, 84 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[fa]"></a>vpostSetSyncLCM_VTiming</STRONG> (ARM, 84 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[fb]"></a>vpostSetSyncLCM_ImageWindow</STRONG> (ARM, 100 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[fc]"></a>vpostSetSyncLCM_SignalPolarity</STRONG> (ARM, 152 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[298]"></a>vpostSetTVEnableConfig</STRONG> (ARM, 176 bytes, Stack size 24 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>vpostSetLCM_ImageSource</STRONG> (ARM, 28 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[299]"></a>vpostMPULCDWriteAddr16Bit</STRONG> (ARM, 172 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>vpostMPULCDWriteData16Bit</STRONG> (ARM, 168 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>vpostMPULCDReadData16Bit</STRONG> (ARM, 164 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>vpostEnableInt</STRONG> (ARM, 36 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>vpostDisableInt</STRONG> (ARM, 36 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>vpostClearInt</STRONG> (ARM, 24 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostISR
</UL>

<P><STRONG><a name="[ee]"></a>vpostIsIntEnabled</STRONG> (ARM, 36 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostISR
</UL>

<P><STRONG><a name="[f0]"></a>vpostInstallCallBack</STRONG> (ARM, 212 bytes, Stack size 16 bytes, w55fa93_vpost_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>

<P><STRONG><a name="[29e]"></a>vpostSetMPULCM_ImageWindow</STRONG> (ARM, 76 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>vpostSetMPULCM_TimingConfig</STRONG> (ARM, 44 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>vpostSetMPULCM_BusModeSelect</STRONG> (ARM, 28 bytes, Stack size 0 bytes, w55fa93_vpost_driver.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>vpostLCMInit_HANNSTAR_HSD043I9W1</STRONG> (ARM, 440 bytes, Stack size 40 bytes, w55fa93_vpost_hannstar_hsd043i9w1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = vpostLCMInit_HANNSTAR_HSD043I9W1 &rArr; vpostAllocVABuffer &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPLLOutputKhz
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetLCM_ImageSource
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_SignalPolarity
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_ImageWindow
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_VTiming
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetSyncLCM_HTiming
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetDataBusPin
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetYUVEndianSelect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetFrameBuffer_DataType
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetParalelSyncLCM_Interface
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostSetLCM_TypeSelect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostsetLCM_TimingType
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABufferFromAP
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABuffer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostVAStopTrigger
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostVAStartTrigger
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDelay
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit
</UL>

<P><STRONG><a name="[e8]"></a>vpostLCMDeinit_HANNSTAR_HSD043I9W1</STRONG> (ARM, 40 bytes, Stack size 8 bytes, w55fa93_vpost_hannstar_hsd043i9w1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostFreeVABuffer
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostVAStopTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMDeinit
</UL>

<P><STRONG><a name="[109]"></a>usb_hub_port_disable</STRONG> (ARM, 64 bytes, Stack size 16 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = usb_hub_port_disable &rArr; usb_clear_port_feature &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_port_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
</UL>

<P><STRONG><a name="[112]"></a>USB_ResetDevice</STRONG> (ARM, 952 bytes, Stack size 56 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = USB_ResetDevice &rArr; usb_hub_port_reset &rArr; usb_hub_port_wait_reset &rArr; usb_get_port_status &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetMaximumPacketSize
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDeviceDescriptor
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetConfiguration
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DestroyConfiguration
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearBit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_reset
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_reset
</UL>

<P><STRONG><a name="[11c]"></a>usb_hub_events</STRONG> (ARM, 908 bytes, Stack size 48 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564 + Unknown Stack Size
<LI>Call Chain = usb_hub_events &rArr; usb_hub_port_connect_change &rArr; USB_SettleNewDevice &rArr; USB_ShowUsbString &rArr; USB_TranslateString &rArr; USB_GetStringDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_disconnect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_power_on
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_port_status
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_hub_status
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_port_feature
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_hub_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_CheckIrqEvent
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitHubDriver
</UL>

<P><STRONG><a name="[8a]"></a>Hub_CheckIrqEvent</STRONG> (ARM, 20 bytes, Stack size 8 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = Hub_CheckIrqEvent &rArr; usb_hub_events &rArr; usb_hub_port_connect_change &rArr; USB_SettleNewDevice &rArr; USB_ShowUsbString &rArr; USB_TranslateString &rArr; USB_GetStringDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_int_timer_do
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverConnectTest
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
</UL>

<P><STRONG><a name="[122]"></a>USB_InitHubDriver</STRONG> (ARM, 48 bytes, Stack size 8 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + Unknown Stack Size
<LI>Call Chain = USB_InitHubDriver &rArr; usb_hub_events &rArr; usb_hub_port_connect_change &rArr; USB_SettleNewDevice &rArr; USB_ShowUsbString &rArr; USB_TranslateString &rArr; USB_GetStringDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RegisterDriver
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
</UL>

<P><STRONG><a name="[123]"></a>USB_RemoveHubDriver</STRONG> (ARM, 16 bytes, Stack size 8 bytes, hub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeregisterDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitUsbSystem
</UL>

<P><STRONG><a name="[124]"></a>usbClearFeature</STRONG> (ARM, 40 bytes, Stack size 16 bytes, hub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_port_feature
</UL>

<P><STRONG><a name="[125]"></a>USB_InitializeMemoryPool</STRONG> (ARM, 120 bytes, Stack size 8 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_InitializeMemoryPool
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
</UL>

<P><STRONG><a name="[bc]"></a>USB_available_memory</STRONG> (ARM, 12 bytes, Stack size 0 bytes, support.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbvideo_IsocIrq
</UL>

<P><STRONG><a name="[2a1]"></a>USB_allocated_memory</STRONG> (ARM, 12 bytes, Stack size 0 bytes, support.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>USB_malloc</STRONG> (ARM, 1108 bytes, Stack size 40 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateUrb
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Probe
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_SetupOnOpen
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_check_sensor
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbvideo_IsocIrq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TranslateString
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_probe
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Open
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkTransport
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkMaxLun
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_allocate_irq
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ShowUsbString
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateBus
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_configuration
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_interface
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_endpoint
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetConfiguration
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateDevice
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_probe
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_port_status
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_hub_status
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_control_msg
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_alloc_ohci
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_alloc_dev
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_submit_urb
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_add_ed
</UL>

<P><STRONG><a name="[b7]"></a>USB_free</STRONG> (ARM, 384 bytes, Stack size 24 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeUrb
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Probe
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Disconnect
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_check_sensor
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbvideo_IsocIrq
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_DropFrameQueue
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TranslateString
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_disconnect
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683_GetFramePiece
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Open
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkTransport
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkMaxLun
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_RemoveUmasDriver
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_disconnect
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ShowUsbString
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeBus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_interface
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetConfiguration
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DestroyConfiguration
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_disconnect
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_probe
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_port_status
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_hub_status
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_control_msg
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_release_ohci
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_alloc_ohci
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_del_list
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_free_dev
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urb_free_priv
</UL>

<P><STRONG><a name="[c9]"></a>USB_WaitMiliseconds</STRONG> (ARM, 64 bytes, Stack size 16 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = USB_WaitMiliseconds
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Open
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbInitializeOHCI
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_wait_reset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_power_on
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OHCI_Resume
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OHCI_suspend
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_start
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_free_dev
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_unlink_urb
</UL>

<P><STRONG><a name="[136]"></a>USB_SetBit</STRONG> (ARM, 68 bytes, Stack size 8 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RegisterBus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConnectDevice
</UL>

<P><STRONG><a name="[117]"></a>USB_ClearBit</STRONG> (ARM, 228 bytes, Stack size 8 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_deregister_bus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisconnectDevice
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
</UL>

<P><STRONG><a name="[126]"></a>USB_FindNextZeroBit</STRONG> (ARM, 120 bytes, Stack size 32 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = USB_FindNextZeroBit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RegisterBus
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConnectDevice
</UL>

<P><STRONG><a name="[12a]"></a>USB_DriverClaimInterface</STRONG> (ARM, 36 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_find_interface_driver
</UL>

<P><STRONG><a name="[129]"></a>usb_match_id</STRONG> (ARM, 436 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_match_id
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_find_interface_driver
</UL>

<P><STRONG><a name="[128]"></a>USB_InterfaceClaimed</STRONG> (ARM, 48 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_find_drivers
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_find_interface_driver
</UL>

<P><STRONG><a name="[12c]"></a>USB_ScanDevices</STRONG> (ARM, 144 bytes, Stack size 16 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = USB_ScanDevices &rArr; usb_check_support &rArr;  usb_check_support (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_check_support
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RegisterDriver
</UL>

<P><STRONG><a name="[b8]"></a>USB_RegisterDriver</STRONG> (ARM, 48 bytes, Stack size 16 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = USB_RegisterDriver &rArr; USB_ScanDevices &rArr; usb_check_support &rArr;  usb_check_support (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ScanDevices
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBKeyboardInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDriver
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitHubDriver
</UL>

<P><STRONG><a name="[12f]"></a>USB_DriverReleaseInterface</STRONG> (ARM, 44 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_drivers_purge
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisconnectDevice
</UL>

<P><STRONG><a name="[ce]"></a>USB_DeregisterDriver</STRONG> (ARM, 68 bytes, Stack size 16 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_drivers_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Exit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_RemoveUmasDriver
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RemoveHubDriver
</UL>

<P><STRONG><a name="[149]"></a>USB_GetInterfaceData</STRONG> (ARM, 92 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
</UL>

<P><STRONG><a name="[2a2]"></a>USB_GetEndpointDescriptor</STRONG> (ARM, 264 bytes, Stack size 12 bytes, usb.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>usb_calc_bus_time</STRONG> (ARM, 320 bytes, Stack size 32 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usb_calc_bus_time &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CheckBandwidth
</UL>

<P><STRONG><a name="[132]"></a>USB_CheckBandwidth</STRONG> (ARM, 216 bytes, Stack size 32 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = USB_CheckBandwidth &rArr; usb_calc_bus_time &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_calc_bus_time
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_submit_urb
</UL>

<P><STRONG><a name="[1ce]"></a>USB_ClaimBandwidth</STRONG> (ARM, 84 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ClaimBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_submit_urb
</UL>

<P><STRONG><a name="[1c1]"></a>USB_ReleaseBandwidth</STRONG> (ARM, 88 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urb_rm_priv_locked
</UL>

<P><STRONG><a name="[133]"></a>USB_AllocateBus</STRONG> (ARM, 128 bytes, Stack size 16 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = USB_AllocateBus &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_alloc_ohci
</UL>

<P><STRONG><a name="[134]"></a>USB_FreeBus</STRONG> (ARM, 36 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = USB_FreeBus &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_release_ohci
</UL>

<P><STRONG><a name="[135]"></a>USB_RegisterBus</STRONG> (ARM, 96 bytes, Stack size 24 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = USB_RegisterBus &rArr; USB_FindNextZeroBit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FindNextZeroBit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbInitializeOHCI
</UL>

<P><STRONG><a name="[137]"></a>usb_deregister_bus</STRONG> (ARM, 32 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_deregister_bus &rArr; USB_ClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_release_ohci
</UL>

<P><STRONG><a name="[10e]"></a>USB_AllocateDevice</STRONG> (ARM, 100 bytes, Stack size 16 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = USB_AllocateDevice &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_start
</UL>

<P><STRONG><a name="[115]"></a>USB_DestroyConfiguration</STRONG> (ARM, 464 bytes, Stack size 40 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = USB_DestroyConfiguration &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
</UL>

<P><STRONG><a name="[cb]"></a>USB_FreeDevice</STRONG> (ARM, 72 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = USB_FreeDevice &rArr; USB_DestroyConfiguration &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DestroyConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Disconnect
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_disconnect
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisconnectDevice
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rh_unlink_urb
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_submit_urb
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rh_submit_urb
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urb_rm_priv_locked
</UL>

<P><STRONG><a name="[cc]"></a>USB_IncreaseDeviceUser</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Probe
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_submit_urb
</UL>

<P><STRONG><a name="[c8]"></a>USB_AllocateUrb</STRONG> (ARM, 68 bytes, Stack size 16 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Open
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_allocate_irq
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendBulkMessage
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_internal_control_msg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
</UL>

<P><STRONG><a name="[ca]"></a>USB_FreeUrb</STRONG> (ARM, 28 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = USB_FreeUrb &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Disconnect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Open
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_disconnect
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_allocate_irq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_start_wait_urb
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_disconnect
</UL>

<P><STRONG><a name="[ac]"></a>USB_SubmitUrb</STRONG> (ARM, 64 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_SubmitUrb
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_StartDataPump
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbvideo_IsocIrq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBKeyboardOpen
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBKeyboardLED
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_led
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_allocate_irq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_start_wait_urb
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_reset
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_bulk_msg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_control_msg
</UL>

<P><STRONG><a name="[b0]"></a>USB_UnlinkUrb</STRONG> (ARM, 64 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_UnlinkUrb
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_StopDataPump
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBKeyboardClose
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_disconnect
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_disconnect
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_start_wait_urb
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_disconnect
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_reset
</UL>

<P><STRONG><a name="[c1]"></a>USB_SendControlMessage</STRONG> (ARM, 164 bytes, Stack size 48 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_internal_control_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_I2C_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_I2C_read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_write_register
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_read_register
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetProtocol
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetIdle
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbReset
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkReset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkMaxLun
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetReport
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetReport
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearHalt
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetProtocol
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStringDescriptor
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetClassDescriptor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_port_status
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_hub_status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_port_feature
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_port_feature
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_hub_feature
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_hub_descriptor
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_halt
</UL>

<P><STRONG><a name="[13c]"></a>USB_SendBulkMessage</STRONG> (ARM, 132 bytes, Stack size 32 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateUrb
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_start_wait_urb
</UL>

<P><STRONG><a name="[2a3]"></a>USB_GetCurrentFrameNumber</STRONG> (ARM, 32 bytes, Stack size 8 bytes, usb.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>USB_RootHubString</STRONG> (ARM, 336 bytes, Stack size 56 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = USB_RootHubString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2utf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rh_submit_urb
</UL>

<P><STRONG><a name="[142]"></a>USB_GetExtraDescriptor</STRONG> (ARM, 116 bytes, Stack size 24 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[10d]"></a>USB_DisconnectDevice</STRONG> (ARM, 220 bytes, Stack size 24 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = USB_DisconnectDevice &rArr;  USB_DisconnectDevice (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriverReleaseInterface
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisconnectDevice
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisconnectDevice
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_disconnect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_restart
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_release_ohci
</UL>

<P><STRONG><a name="[10f]"></a>USB_ConnectDevice</STRONG> (ARM, 144 bytes, Stack size 16 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = USB_ConnectDevice &rArr; USB_FindNextZeroBit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FindNextZeroBit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_start
</UL>

<P><STRONG><a name="[113]"></a>USB_SetAddress</STRONG> (ARM, 164 bytes, Stack size 32 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = USB_SetAddress &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
</UL>

<P><STRONG><a name="[114]"></a>USB_GetDescriptor</STRONG> (ARM, 172 bytes, Stack size 56 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = USB_GetDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDeviceDescriptor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetConfiguration
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
</UL>

<P><STRONG><a name="[144]"></a>USB_GetClassDescriptor</STRONG> (ARM, 116 bytes, Stack size 56 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>

<P><STRONG><a name="[145]"></a>USB_GetStringDescriptor</STRONG> (ARM, 104 bytes, Stack size 48 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = USB_GetStringDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TranslateString
</UL>

<P><STRONG><a name="[116]"></a>USB_GetDeviceDescriptor</STRONG> (ARM, 88 bytes, Stack size 16 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = USB_GetDeviceDescriptor &rArr; USB_GetDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
</UL>

<P><STRONG><a name="[146]"></a>USB_GetStatus</STRONG> (ARM, 112 bytes, Stack size 48 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>

<P><STRONG><a name="[147]"></a>USB_GetProtocol</STRONG> (ARM, 124 bytes, Stack size 48 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>

<P><STRONG><a name="[b2]"></a>USB_SetProtocol</STRONG> (ARM, 104 bytes, Stack size 40 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = USB_SetProtocol &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_probe
</UL>

<P><STRONG><a name="[b3]"></a>USB_SetIdle</STRONG> (ARM, 112 bytes, Stack size 48 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = USB_SetIdle &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_probe
</UL>

<P><STRONG><a name="[119]"></a>USB_SetMaximumPacketSize</STRONG> (ARM, 304 bytes, Stack size 20 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_SetMaximumPacketSize
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
</UL>

<P><STRONG><a name="[148]"></a>USB_ClearHalt</STRONG> (ARM, 388 bytes, Stack size 48 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>

<P><STRONG><a name="[be]"></a>USB_SetInterface</STRONG> (ARM, 180 bytes, Stack size 48 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = USB_SetInterface &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetInterfaceData
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetMaximumPacketSize
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_StartDataPump
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
</UL>

<P><STRONG><a name="[11a]"></a>USB_SetConfiguration</STRONG> (ARM, 228 bytes, Stack size 48 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = USB_SetConfiguration &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetMaximumPacketSize
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
</UL>

<P><STRONG><a name="[14a]"></a>USB_GetReport</STRONG> (ARM, 116 bytes, Stack size 56 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>

<P><STRONG><a name="[14b]"></a>USB_SetReport</STRONG> (ARM, 112 bytes, Stack size 56 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>

<P><STRONG><a name="[118]"></a>USB_GetConfiguration</STRONG> (ARM, 520 bytes, Stack size 40 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = USB_GetConfiguration &rArr; usb_parse_configuration &rArr; usb_parse_interface &rArr; usb_parse_endpoint &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_configuration
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
</UL>

<P><STRONG><a name="[b5]"></a>USB_TranslateString</STRONG> (ARM, 672 bytes, Stack size 40 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = USB_TranslateString &rArr; USB_GetStringDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStringDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_probe
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ShowUsbString
</UL>

<P><STRONG><a name="[110]"></a>USB_SettleNewDevice</STRONG> (ARM, 836 bytes, Stack size 16 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = USB_SettleNewDevice &rArr; USB_ShowUsbString &rArr; USB_TranslateString &rArr; USB_GetStringDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ShowUsbString
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_find_drivers
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetAddress
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDeviceDescriptor
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetConfiguration
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_start
</UL>

<P><STRONG><a name="[ab]"></a>USB_PortInit</STRONG> (ARM, 284 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = USB_PortInit &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>USB_PortDisable</STRONG> (ARM, 44 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
</UL>

<P><STRONG><a name="[90]"></a>InitUsbSystem</STRONG> (ARM, 760 bytes, Stack size 24 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = InitUsbSystem &rArr; Hub_CheckIrqEvent &rArr; usb_hub_events &rArr; usb_hub_port_connect_change &rArr; USB_SettleNewDevice &rArr; USB_ShowUsbString &rArr; USB_TranslateString &rArr; USB_GetStringDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_CheckIrqEvent
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetInterruptType
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbInitializeOHCI
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_PortDisable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitializeMemoryPool
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitHubDriver
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverConnectTest
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntegrationTest
</UL>

<P><STRONG><a name="[150]"></a>DeInitUsbSystem</STRONG> (ARM, 48 bytes, Stack size 8 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbDeInitOHCI
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RemoveHubDriver
</UL>

<P><STRONG><a name="[9c]"></a>umass_register_connect</STRONG> (ARM, 12 bytes, Stack size 0 bytes, umasdriver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverConnectTest
</UL>

<P><STRONG><a name="[9d]"></a>umass_register_disconnect</STRONG> (ARM, 12 bytes, Stack size 0 bytes, umasdriver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverConnectTest
</UL>

<P><STRONG><a name="[158]"></a>UMAS_ScanAllDevice</STRONG> (ARM, 40 bytes, Stack size 8 bytes, umasdriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_ScanDeviceLun
</UL>

<P><STRONG><a name="[91]"></a>UMAS_InitUmasDriver</STRONG> (ARM, 60 bytes, Stack size 8 bytes, umasdriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = UMAS_InitUmasDriver &rArr; USB_RegisterDriver &rArr; USB_ScanDevices &rArr; usb_check_support &rArr;  usb_check_support (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RegisterDriver
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUsbDiskDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverConnectTest
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntegrationTest
</UL>

<P><STRONG><a name="[15b]"></a>UMAS_RemoveUmasDriver</STRONG> (ARM, 168 bytes, Stack size 8 bytes, umasdriver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeregisterDriver
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[15c]"></a>sysIrqHandler</STRONG> (ARM, 148 bytes, Stack size 32 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysIrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.text)
</UL>
<P><STRONG><a name="[15d]"></a>sysFiqHandler</STRONG> (ARM, 148 bytes, Stack size 32 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysFiqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>WB_Interrupt_Shell</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wb_aic.o(.data)
</UL>
<P><STRONG><a name="[15e]"></a>sysInitializeAIC</STRONG> (ARM, 76 bytes, Stack size 16 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
</UL>

<P><STRONG><a name="[e5]"></a>sysDisableInterrupt</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegClose
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitUsbSystem
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStopTimer
</UL>

<P><STRONG><a name="[dd]"></a>sysEnableInterrupt</STRONG> (ARM, 52 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostInstallCallBack
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
</UL>

<P><STRONG><a name="[2a4]"></a>sysInstallExceptionHandler</STRONG> (ARM, 136 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>sysInstallFiqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>sysInstallIrqHandler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>sysInstallISR</STRONG> (ARM, 328 bytes, Stack size 24 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostInstallCallBack
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStopTimer
</UL>

<P><STRONG><a name="[2a7]"></a>sysSetGlobalInterrupt</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>sysSetInterruptPriorityLevel</STRONG> (ARM, 196 bytes, Stack size 16 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>sysSetInterruptType</STRONG> (ARM, 152 bytes, Stack size 12 bytes, wb_aic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysSetInterruptType
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
</UL>

<P><STRONG><a name="[dc]"></a>sysSetLocalInterrupt</STRONG> (ARM, 140 bytes, Stack size 0 bytes, wb_aic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallWatchDogTimerISR
</UL>

<P><STRONG><a name="[2a9]"></a>sysSetAIC2SWMode</STRONG> (ARM, 16 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>sysGetInterruptEnableStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>sysGetIBitState</STRONG> (ARM, 28 bytes, Stack size 0 bytes, wb_aic.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>sysGetSdramSizebyMB</STRONG> (ARM, 284 bytes, Stack size 0 bytes, wb_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[a4]"></a>sysEnableCache</STRONG> (ARM, 44 bytes, Stack size 8 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = sysEnableCache &rArr; sysInitMMUTable &rArr; sysInitPageTable
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>sysDisableCache</STRONG> (ARM, 92 bytes, Stack size 16 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sysDisableCache
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>sysFlushCache</STRONG> (ARM, 112 bytes, Stack size 16 bytes, wb_cache.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
</UL>

<P><STRONG><a name="[2ac]"></a>sysInvalidCache</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>sysGetCacheState</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeAIC
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitPageTable
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetCachePages
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPhyPageAddr
</UL>

<P><STRONG><a name="[2ad]"></a>sysGetCacheMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>_sysLockCode</STRONG> (ARM, 132 bytes, Stack size 12 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>_sysUnLockCode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_cache.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>InitDelay</STRONG> (ARM, 4 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>sysInitDDR</STRONG> (ARM, 280 bytes, Stack size 0 bytes, wb_config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[162]"></a>sysInitDDRStart</STRONG> (ARM, 112 bytes, Stack size 16 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMemory
</UL>

<P><STRONG><a name="[164]"></a>sysInitMemory</STRONG> (ARM, 16 bytes, Stack size 8 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitDDRStart
</UL>

<P><STRONG><a name="[a8]"></a>sysGetPLLOutputKhz</STRONG> (ARM, 144 bytes, Stack size 40 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sysGetPLLOutputKhz
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockDivSwitchStart
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLControlRegister
</UL>

<P><STRONG><a name="[2b1]"></a>sysCheckPllConstraint</STRONG> (ARM, 12 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>sysGetPLLControlRegister</STRONG> (ARM, 432 bytes, Stack size 64 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sysGetPLLControlRegister &rArr; sysGetPLLOutputKhz
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetPllClock
</UL>

<P><STRONG><a name="[2b2]"></a>sysSetPLLControlRegister</STRONG> (ARM, 40 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>sysExternalClock</STRONG> (ARM, 60 bytes, Stack size 0 bytes, wb_config.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>sysClockSwitch</STRONG> (ARM, 844 bytes, Stack size 32 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sysClockSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>sysClockSwitchStart</STRONG> (ARM, 172 bytes, Stack size 64 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysClockSwitchStart
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
</UL>

<P><STRONG><a name="[9f]"></a>sysGetExternalClock</STRONG> (ARM, 60 bytes, Stack size 0 bytes, wb_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockDivSwitchStart
</UL>

<P><STRONG><a name="[a7]"></a>sysSetSystemClock</STRONG> (ARM, 1332 bytes, Stack size 64 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = sysSetSystemClock &rArr; sysGetPLLControlRegister &rArr; sysGetPLLOutputKhz
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockSwitchStart
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLControlRegister
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>sysGetSystemClock</STRONG> (ARM, 136 bytes, Stack size 12 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysGetSystemClock
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
</UL>

<P><STRONG><a name="[168]"></a>sysSetPllClock</STRONG> (ARM, 252 bytes, Stack size 24 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLControlRegister
</UL>

<P><STRONG><a name="[16a]"></a>sysClockDiv</STRONG> (ARM, 376 bytes, Stack size 12 bytes, wb_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysClockDiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_config.o(.text)
</UL>
<P><STRONG><a name="[169]"></a>sysClockDivSwitchStart</STRONG> (ARM, 248 bytes, Stack size 32 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[16b]"></a>sysPowerDownPLL</STRONG> (ARM, 196 bytes, Stack size 16 bytes, wb_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
</UL>

<P><STRONG><a name="[4c]"></a>sysTimerISR</STRONG> (ARM, 432 bytes, Stack size 8 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysTimerISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_timer.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>sysGetTicks</STRONG> (ARM, 76 bytes, Stack size 0 bytes, wb_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683_GetFramePiece
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntegrationTest
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkReset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_start_wait_urb
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ioc_block
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_bulk_msg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_control_msg
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
</UL>

<P><STRONG><a name="[2b4]"></a>sysResetTicks</STRONG> (ARM, 84 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>sysUpdateTickCount</STRONG> (ARM, 76 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>sysSetTimerReferenceClock</STRONG> (ARM, 76 bytes, Stack size 0 bytes, wb_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>sysStartTimer</STRONG> (ARM, 528 bytes, Stack size 32 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = sysStartTimer &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetInterruptType
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelay
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>sysStopTimer</STRONG> (ARM, 264 bytes, Stack size 8 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableInterrupt
</UL>

<P><STRONG><a name="[2b6]"></a>sysClearWatchDogTimerCount</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>sysClearWatchDogTimerInterruptStatus</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>sysDisableWatchDogTimer</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>sysDisableWatchDogTimerReset</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>sysEnableWatchDogTimer</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>sysEnableWatchDogTimerReset</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>sysInstallWatchDogTimerISR</STRONG> (ARM, 72 bytes, Stack size 24 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalInterrupt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
</UL>

<P><STRONG><a name="[2bc]"></a>sysSetWatchDogTimerInterval</STRONG> (ARM, 40 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>sysSetTimerEvent</STRONG> (ARM, 360 bytes, Stack size 12 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>sysClearTimerEvent</STRONG> (ARM, 180 bytes, Stack size 0 bytes, wb_timer.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>sysDOS_Time_To_UTC</STRONG> (ARM, 300 bytes, Stack size 16 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetLocalTime
</UL>

<P><STRONG><a name="[16e]"></a>sysUTC_To_DOS_Time</STRONG> (ARM, 320 bytes, Stack size 24 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sysUTC_To_DOS_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
</UL>

<P><STRONG><a name="[16f]"></a>sysSetLocalTime</STRONG> (ARM, 64 bytes, Stack size 28 bytes, wb_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDOS_Time_To_UTC
</UL>

<P><STRONG><a name="[171]"></a>sysGetCurrentTime</STRONG> (ARM, 68 bytes, Stack size 16 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = sysGetCurrentTime &rArr; sysUTC_To_DOS_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUTC_To_DOS_Time
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
</UL>

<P><STRONG><a name="[9e]"></a>sysDelay</STRONG> (ARM, 92 bytes, Stack size 16 bytes, wb_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sysDelay &rArr; sysStartTimer &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverConnectTest
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPowerDownPLL
</UL>

<P><STRONG><a name="[a5]"></a>sysUartPort</STRONG> (ARM, 156 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bf]"></a>sysUartInstallcallback</STRONG> (ARM, 76 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>sysUartISR</STRONG> (ARM, 676 bytes, Stack size 24 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysUartISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_uart.o(.text)
</UL>
<P><STRONG><a name="[2c0]"></a>sysUartEnableInt</STRONG> (ARM, 148 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>sysInitializeUART</STRONG> (ARM, 484 bytes, Stack size 8 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = sysInitializeUART &rArr; sysInstallISR &rArr; sysInitializeAIC &rArr; sysFlushCache
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInstallISR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableInterrupt
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
</UL>

<P><STRONG><a name="[174]"></a>_PutChar_f</STRONG> (ARM, 440 bytes, Stack size 0 bytes, wb_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
</UL>

<P><STRONG><a name="[173]"></a>sysPutString</STRONG> (ARM, 40 bytes, Stack size 8 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sysPutString
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[179]"></a>sysPrintf</STRONG> (ARM, 204 bytes, Stack size 40 bytes, wb_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[6f]"></a>sysprintf</STRONG> (ARM, 204 bytes, Stack size 40 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetExternalClock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateUrb
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_StopDataPump
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_StartDataPump
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Probe
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Disconnect
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_SetupOnOpen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_I2C_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_I2C_read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_write_register
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_read_register
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbvideo_IsocIrq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TranslateString
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBKeyboardLED
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_probe
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_led
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_irq
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Open
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_PortInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDriver
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverConnectTest
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecTest
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MassStotrageDisconnection
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MassStotrageConnection
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntegrationTest
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegEncTest
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecHeaderComplete
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Compare
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_TransparentScsiCommand
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_ScanDeviceLun
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbiTransport
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbiIrq
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbTransport
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbReset
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkTransport
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkReset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkMaxLun
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_RemoveUmasDriver
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_disconnect
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_allocate_irq
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_irq
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbInitializeOHCI
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetExtraDescriptor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RegisterBus
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_configuration
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_interface
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_endpoint
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_find_drivers
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_drivers_purge
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_check_support
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_find_interface_driver
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FindNextZeroBit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetConfiguration
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitHubDriver
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_disable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_probe
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_disconnect
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_reset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_wait_reset
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_DEBUG_ShowSense
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_DEBUG_PrintScsiCommand
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umas_disk_write
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umas_disk_read
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_scsi_command
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_DEBUG_ShowCommand
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_inquiry_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSense6to10
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSense10to6
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSenseParseBuffer
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InvokeTransport
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_transfer_partial
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_bulk_msg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_control_msg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_halt
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_transfer_length
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OHCI_Resume
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OHCI_suspend
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_restart
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_reset
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_reverse_done_list
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_free_dev
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_unlink_urb
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rh_submit_urb
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rh_send_irq
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;td_submit_urb
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;td_fill
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_td_fill
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockDivSwitchStart
</UL>

<P><STRONG><a name="[2c1]"></a>sysGetChar</STRONG> (ARM, 116 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>sysPutChar</STRONG> (ARM, 48 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>sysUartTransfer</STRONG> (ARM, 68 bytes, Stack size 0 bytes, wb_uart.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>fsInitFileSystem</STRONG> (ARM, 132 bytes, Stack size 8 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fsInitFileSystem &rArr; fs_enable_iow_cache &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init_sector_buffer
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_init_sector_cache
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_enable_iow_cache
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>release_file_handle</STRONG> (ARM, 152 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = release_file_handle &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
</UL>

<P><STRONG><a name="[7d]"></a>fsCloseFile</STRONG> (ARM, 224 bytes, Stack size 24 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fsCloseFile &rArr; unlink_file_from_disk &rArr; fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_file_handle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_file_from_disk
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Compare
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mkdir
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindClose
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindNext
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindFirst
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileTime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileAttribute
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileStatus
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileStatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileSize
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFileSystem
</UL>

<P><STRONG><a name="[181]"></a>fsCloseFileSystem</STRONG> (ARM, 144 bytes, Stack size 16 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskDisconnected
</UL>

<P><STRONG><a name="[2c4]"></a>all_file_handle_is_free</STRONG> (ARM, 60 bytes, Stack size 0 bytes, nvtfat.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>allocate_file_handle</STRONG> (ARM, 216 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = allocate_file_handle &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
</UL>

<P><STRONG><a name="[183]"></a>fsHandleToDescriptor</STRONG> (ARM, 60 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fsHandleToDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRwDebug
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[1b9]"></a>fsDescriptorToHandle</STRONG> (ARM, 100 bytes, Stack size 0 bytes, nvtfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk
</UL>

<P><STRONG><a name="[184]"></a>fsIsFileOpened</STRONG> (ARM, 104 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fsIsFileOpened &rArr; fsUnicodeNonCaseCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[186]"></a>get_vdisk</STRONG> (ARM, 120 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_vdisk
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsToUpperCase
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDiskFreeSpace
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteFile
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetLDiskVolID
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteDirTree
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRemoveDirectory
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMakeDirectory
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMoveFile
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileTime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileAttribute
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileStatus
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMergeFile
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileSize
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetVolumeLabel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetVolumeLabel
</UL>

<P><STRONG><a name="[94]"></a>fsDiskFreeSpace</STRONG> (ARM, 144 bytes, Stack size 32 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fsDiskFreeSpace &rArr; read_fs_info &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverConnectTest
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntegrationTest
</UL>

<P><STRONG><a name="[189]"></a>fsSetVolumeLabel</STRONG> (ARM, 208 bytes, Stack size 40 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[18a]"></a>fsGetVolumeLabel</STRONG> (ARM, 188 bytes, Stack size 40 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[18b]"></a>fsSetFileSize</STRONG> (ARM, 480 bytes, Stack size 88 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + In Cycle
<LI>Call Chain = fsSetFileSize &rArr;  fsOpenFile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
</UL>

<P><STRONG><a name="[7b]"></a>fsOpenFile</STRONG> (ARM, 804 bytes, Stack size 56 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUpperCase
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileSize
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIsFileOpened
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_file_handle
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_file_handle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_file_to_disk
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Compare
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mkdir
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindFirst
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileTime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileAttribute
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileStatus
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileStatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileSize
</UL>

<P><STRONG><a name="[7c]"></a>fsReadFile</STRONG> (ARM, 248 bytes, Stack size 32 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fsReadFile
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Compare
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dir_empty
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
</UL>

<P><STRONG><a name="[82]"></a>fsWriteFile</STRONG> (ARM, 164 bytes, Stack size 32 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fsWriteFile
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
</UL>

<P><STRONG><a name="[190]"></a>fsMergeFile</STRONG> (ARM, 224 bytes, Stack size 552 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>

<P><STRONG><a name="[192]"></a>fsFileSeek</STRONG> (ARM, 480 bytes, Stack size 72 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = fsFileSeek &rArr; fsSetFileSize &rArr;  fsOpenFile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileSize
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dir_empty
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[193]"></a>fsIsEOF</STRONG> (ARM, 128 bytes, Stack size 16 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>

<P><STRONG><a name="[194]"></a>fsGetFileStatus</STRONG> (ARM, 256 bytes, Stack size 32 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMoveFile
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
</UL>

<P><STRONG><a name="[195]"></a>fsSetFileStatus</STRONG> (ARM, 412 bytes, Stack size 40 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>

<P><STRONG><a name="[196]"></a>fsSetFileAttribute</STRONG> (ARM, 508 bytes, Stack size 112 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>

<P><STRONG><a name="[197]"></a>fsSetFileTime</STRONG> (ARM, 608 bytes, Stack size 96 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
</UL>

<P><STRONG><a name="[9a]"></a>fsGetFileSize</STRONG> (ARM, 164 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fsGetFileSize
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess
</UL>

<P><STRONG><a name="[198]"></a>fsGetFilePosition</STRONG> (ARM, 104 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fsGetFilePosition
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dir_empty
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
</UL>

<P><STRONG><a name="[86]"></a>fsDeleteFile</STRONG> (ARM, 244 bytes, Stack size 280 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMoveFile
</UL>

<P><STRONG><a name="[199]"></a>fsRenameFile</STRONG> (ARM, 516 bytes, Stack size 576 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMoveFile
</UL>

<P><STRONG><a name="[19a]"></a>fsCopyFile</STRONG> (ARM, 516 bytes, Stack size 136 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileTime
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMoveFile
</UL>

<P><STRONG><a name="[19b]"></a>fsMoveFile</STRONG> (ARM, 412 bytes, Stack size 96 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteFile
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileStatus
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
</UL>

<P><STRONG><a name="[19c]"></a>fsFindFirst</STRONG> (ARM, 308 bytes, Stack size 24 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[19d]"></a>fsFindNext</STRONG> (ARM, 136 bytes, Stack size 16 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[19e]"></a>fsFindClose</STRONG> (ARM, 180 bytes, Stack size 16 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_slot_index
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[19f]"></a>fsMakeDirectory</STRONG> (ARM, 204 bytes, Stack size 280 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>

<P><STRONG><a name="[1a0]"></a>fsRemoveDirectory</STRONG> (ARM, 204 bytes, Stack size 280 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteDirTree
</UL>

<P><STRONG><a name="[1a1]"></a>fsDeleteDirTree</STRONG> (ARM, 228 bytes, Stack size 24 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRemoveDirectory
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
</UL>

<P><STRONG><a name="[1a7]"></a>fsGetDirectoryInfo</STRONG> (ARM, 80 bytes, Stack size 40 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[1a8]"></a>fsGetDirectoryInfo2</STRONG> (ARM, 80 bytes, Stack size 48 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[1a9]"></a>fsGetLDiskVolID</STRONG> (ARM, 120 bytes, Stack size 24 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
</UL>

<P><STRONG><a name="[1ab]"></a>fsCheckDriverPointer</STRONG> (ARM, 56 bytes, Stack size 0 bytes, nvtfat_disk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_disk_driver
</UL>

<P><STRONG><a name="[aa]"></a>fsAssignDriveNumber</STRONG> (ARM, 264 bytes, Stack size 32 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fsAssignDriveNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsToUpperCase
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c5]"></a>fsInstallDiskMountCallBack</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nvtfat_disk.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>fsInstallDiskUnmountCallBack</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nvtfat_disk.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>fs_last_drive_no</STRONG> (ARM, 52 bytes, Stack size 0 bytes, nvtfat_disk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice
</UL>

<P><STRONG><a name="[1ac]"></a>fsAllocateDisk</STRONG> (ARM, 120 bytes, Stack size 24 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fsAllocateDisk &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_drive_number
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
</UL>

<P><STRONG><a name="[20a]"></a>fsMountLogicalDisk</STRONG> (ARM, 140 bytes, Stack size 16 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fsMountLogicalDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
</UL>

<P><STRONG><a name="[17f]"></a>fsUnmountLogicalDisk</STRONG> (ARM, 184 bytes, Stack size 16 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_clear_sector_cache
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFlushIOCache
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_drive_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_file_from_disk
</UL>

<P><STRONG><a name="[1b7]"></a>fsPhysicalDiskConnected</STRONG> (ARM, 584 bytes, Stack size 40 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = fsPhysicalDiskConnected &rArr; parse_partition_records &rArr;  parse_partition_records (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_new_disk_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_ScanDeviceLun
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice
</UL>

<P><STRONG><a name="[1b8]"></a>fsUnmountPhysicalDisk</STRONG> (ARM, 272 bytes, Stack size 40 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fsUnmountPhysicalDisk &rArr; fsCloseFile &rArr; unlink_file_from_disk &rArr; fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFlushIOCache
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDescriptorToHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskDisconnected
</UL>

<P><STRONG><a name="[157]"></a>fsPhysicalDiskDisconnected</STRONG> (ARM, 32 bytes, Stack size 8 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fsPhysicalDiskDisconnected &rArr; fsUnmountPhysicalDisk &rArr; fsCloseFile &rArr; unlink_file_from_disk &rArr; fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_disconnect
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFileSystem
</UL>

<P><STRONG><a name="[1ba]"></a>fsReleaseDiskInformation</STRONG> (ARM, 96 bytes, Stack size 24 bytes, nvtfat_disk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFullDiskInfomation
</UL>

<P><STRONG><a name="[1bb]"></a>fsGetFullDiskInfomation</STRONG> (ARM, 420 bytes, Stack size 32 bytes, nvtfat_disk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReleaseDiskInformation
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1be]"></a>fsUnicodeToAscii</STRONG> (ARM, 140 bytes, Stack size 24 bytes, nvtfat_language.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsUnicodeToAscii
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
</UL>

<P><STRONG><a name="[18c]"></a>fsUnicodeStrLen</STRONG> (ARM, 76 bytes, Stack size 0 bytes, nvtfat_language.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteFile
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrCat
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMoveFile
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[1a6]"></a>fsUnicodeStrCat</STRONG> (ARM, 100 bytes, Stack size 24 bytes, nvtfat_language.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[85]"></a>fsAsciiToUnicode</STRONG> (ARM, 124 bytes, Stack size 24 bytes, nvtfat_language.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsAsciiToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[18e]"></a>fsAsciiToUpperCase</STRONG> (ARM, 68 bytes, Stack size 0 bytes, nvtfat_language.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
</UL>

<P><STRONG><a name="[223]"></a>fsUnicodeToUpperCase</STRONG> (ARM, 92 bytes, Stack size 0 bytes, nvtfat_language.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
</UL>

<P><STRONG><a name="[216]"></a>fsUnicodeToLowerCase</STRONG> (ARM, 92 bytes, Stack size 0 bytes, nvtfat_language.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[1bc]"></a>fsAsciiNonCaseCompare</STRONG> (ARM, 116 bytes, Stack size 24 bytes, nvtfat_language.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsAsciiNonCaseCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsToUpperCase
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
</UL>

<P><STRONG><a name="[185]"></a>fsUnicodeNonCaseCompare</STRONG> (ARM, 280 bytes, Stack size 32 bytes, nvtfat_language.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fsUnicodeNonCaseCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsToUpperCase
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIsFileOpened
</UL>

<P><STRONG><a name="[1a5]"></a>fsUnicodeCopyStr</STRONG> (ARM, 88 bytes, Stack size 8 bytes, nvtfat_language.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fsUnicodeCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[18d]"></a>fsGetAsciiFileName</STRONG> (ARM, 80 bytes, Stack size 544 bytes, nvtfat_language.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindLastSlash
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToAscii
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteFile
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRemoveDirectory
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMakeDirectory
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMergeFile
</UL>

<P><STRONG><a name="[2c7]"></a>fsDebugUniStr</STRONG> (ARM, 136 bytes, Stack size 0 bytes, nvtfat_language.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>ohci_int_timer_do</STRONG> (ARM, 124 bytes, Stack size 24 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = ohci_int_timer_do &rArr; rh_send_irq &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rh_send_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hub_CheckIrqEvent
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rh_submit_urb
</UL>

<P><STRONG><a name="[41]"></a>ohci_irq</STRONG> (ARM, 336 bytes, Stack size 24 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = ohci_irq &rArr; dl_done_list &rArr; sohci_return_urb &rArr; td_submit_urb &rArr; iso_td_fill &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_reset
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_done_list
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_del_list
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_reverse_done_list
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.text)
</UL>
<P><STRONG><a name="[1de]"></a>OHCI_suspend</STRONG> (ARM, 84 bytes, Stack size 8 bytes, usb-ohci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[1df]"></a>OHCI_Resume</STRONG> (ARM, 616 bytes, Stack size 16 bytes, usb-ohci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_restart
</UL>

<P><STRONG><a name="[14f]"></a>UsbInitializeOHCI</STRONG> (ARM, 152 bytes, Stack size 8 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484 + Unknown Stack Size
<LI>Call Chain = UsbInitializeOHCI &rArr; hc_start &rArr; USB_SettleNewDevice &rArr; USB_ShowUsbString &rArr; USB_TranslateString &rArr; USB_GetStringDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RegisterBus
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_release_ohci
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_alloc_ohci
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_start
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
</UL>

<P><STRONG><a name="[151]"></a>UsbDeInitOHCI</STRONG> (ARM, 96 bytes, Stack size 8 bytes, usb-ohci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_release_ohci
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_alloc_ohci
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitUsbSystem
</UL>

<P><STRONG><a name="[1e1]"></a>USB_ShowEndpointDescriptor</STRONG> (ARM, 76 bytes, Stack size 24 bytes, usb-debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_ShowEndpointDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_show_endpoint
</UL>

<P><STRONG><a name="[1e3]"></a>USB_ShowInterfaceDescriptor</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usb-debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_show_interface
</UL>

<P><STRONG><a name="[1e5]"></a>USB_ShowConfigurationDescriptor</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usb-debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_show_config
</UL>

<P><STRONG><a name="[1e6]"></a>USB_ShowDeviceDescriptor</STRONG> (ARM, 176 bytes, Stack size 0 bytes, usb-debug.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ShowDevice
</UL>

<P><STRONG><a name="[139]"></a>USB_ShowDevice</STRONG> (ARM, 84 bytes, Stack size 16 bytes, usb-debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_ShowDevice &rArr; usb_show_config &rArr; usb_show_interface &rArr; usb_show_endpoint &rArr; USB_ShowEndpointDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ShowDeviceDescriptor
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_show_config
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_find_drivers
</UL>

<P><STRONG><a name="[14c]"></a>USB_ShowUsbString</STRONG> (ARM, 92 bytes, Stack size 24 bytes, usb-debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = USB_ShowUsbString &rArr; USB_TranslateString &rArr; USB_GetStringDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TranslateString
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
</UL>

<P><STRONG><a name="[2c8]"></a>USB_DumpUrb</STRONG> (ARM, 4 bytes, Stack size 0 bytes, usb-debug.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>is_urb_completed</STRONG> (ARM, 12 bytes, Stack size 0 bytes, umastransport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_bulk_msg
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_control_msg
</UL>

<P><STRONG><a name="[1ef]"></a>UMAS_InvokeTransport</STRONG> (ARM, 888 bytes, Stack size 56 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = UMAS_InvokeTransport &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_UfiCommand
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_TransparentScsiCommand
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_Qic157Command
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_AtapiCommand
</UL>

<P><STRONG><a name="[42]"></a>UMAS_CbiIrq</STRONG> (ARM, 140 bytes, Stack size 16 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = UMAS_CbiIrq &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasdriver.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>UMAS_CbiTransport</STRONG> (ARM, 532 bytes, Stack size 40 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = UMAS_CbiTransport &rArr; us_transfer &rArr; usb_stor_transfer_partial &rArr; clear_halt &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_transfer
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_control_msg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_halt
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_transfer_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasdriver.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>UMAS_CbTransport</STRONG> (ARM, 240 bytes, Stack size 40 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = UMAS_CbTransport &rArr; us_transfer &rArr; usb_stor_transfer_partial &rArr; clear_halt &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_transfer
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_control_msg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_halt
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_transfer_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasdriver.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>UMAS_BulkMaxLun</STRONG> (ARM, 188 bytes, Stack size 48 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = UMAS_BulkMaxLun &rArr; clear_halt &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_halt
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
</UL>

<P><STRONG><a name="[46]"></a>UMAS_BulkTransport</STRONG> (ARM, 1148 bytes, Stack size 48 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = UMAS_BulkTransport &rArr; us_transfer &rArr; usb_stor_transfer_partial &rArr; clear_halt &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_transfer
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_bulk_msg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_halt
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_transfer_length
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasdriver.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>UMAS_CbReset</STRONG> (ARM, 524 bytes, Stack size 48 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = UMAS_CbReset &rArr; clear_halt &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_halt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasdriver.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>UMAS_BulkReset</STRONG> (ARM, 240 bytes, Stack size 40 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = UMAS_BulkReset &rArr; clear_halt &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasdriver.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>UMAS_Qic157Command</STRONG> (ARM, 88 bytes, Stack size 16 bytes, umasprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = UMAS_Qic157Command &rArr; UMAS_InvokeTransport &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_inquiry_data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InvokeTransport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasdriver.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>UMAS_AtapiCommand</STRONG> (ARM, 416 bytes, Stack size 16 bytes, umasprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = UMAS_AtapiCommand &rArr; usb_stor_scsiSense6to10 &rArr; usb_stor_scsiSenseParseBuffer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_inquiry_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSense6to10
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSense10to6
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InvokeTransport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasdriver.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>UMAS_UfiCommand</STRONG> (ARM, 452 bytes, Stack size 16 bytes, umasprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = UMAS_UfiCommand &rArr; usb_stor_scsiSense6to10 &rArr; usb_stor_scsiSenseParseBuffer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_inquiry_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSense6to10
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSense10to6
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InvokeTransport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasdriver.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>UMAS_TransparentScsiCommand</STRONG> (ARM, 264 bytes, Stack size 16 bytes, umasprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = UMAS_TransparentScsiCommand &rArr; UMAS_InvokeTransport &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_DEBUG_ShowCommand
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fix_inquiry_data
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InvokeTransport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasdriver.o(.text)
</UL>
<P><STRONG><a name="[1f6]"></a>test_unit_ready</STRONG> (ARM, 104 bytes, Stack size 16 bytes, umasscsiglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = test_unit_ready &rArr; run_scsi_command &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_scsi_command
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_ScanDeviceLun
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_test_unit_ready
</UL>

<P><STRONG><a name="[1f7]"></a>request_sense</STRONG> (ARM, 336 bytes, Stack size 16 bytes, umasscsiglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = request_sense &rArr; run_scsi_command &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_scsi_command
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_ScanDeviceLun
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice
</UL>

<P><STRONG><a name="[1f8]"></a>try_test_unit_ready</STRONG> (ARM, 64 bytes, Stack size 16 bytes, umasscsiglue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_ready
</UL>

<P><STRONG><a name="[15a]"></a>UMAS_InitUsbDiskDriver</STRONG> (ARM, 8 bytes, Stack size 0 bytes, umasscsiglue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDriver
</UL>

<P><STRONG><a name="[159]"></a>UMAS_ScanDeviceLun</STRONG> (ARM, 516 bytes, Stack size 32 bytes, umasscsiglue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_sense
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_ready
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_scsi_command
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_ScanAllDevice
</UL>

<P><STRONG><a name="[156]"></a>UMAS_InitUmasDevice</STRONG> (ARM, 1628 bytes, Stack size 40 bytes, umasscsiglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = UMAS_InitUmasDevice &rArr; fsPhysicalDiskConnected &rArr; parse_partition_records &rArr;  parse_partition_records (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_sense
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_ready
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_scsi_command
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_last_drive_no
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
</UL>

<P><STRONG><a name="[1fa]"></a>sysGetPhyPageAddr</STRONG> (ARM, 100 bytes, Stack size 40 bytes, wb_mmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
</UL>

<P><STRONG><a name="[1fb]"></a>sysSetCachePages</STRONG> (ARM, 280 bytes, Stack size 48 bytes, wb_mmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
</UL>

<P><STRONG><a name="[1fc]"></a>sysInitPageTable</STRONG> (ARM, 368 bytes, Stack size 72 bytes, wb_mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sysInitPageTable
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCacheState
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[2c9]"></a>sysSetMMUMappingMethod</STRONG> (ARM, 20 bytes, Stack size 0 bytes, wb_mmu.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>sysInitMMUTable</STRONG> (ARM, 524 bytes, Stack size 32 bytes, wb_mmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sysInitMMUTable &rArr; sysInitPageTable
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetupCP15
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitPageTable
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetSdramSizebyMB
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysEnableCache
</UL>

<P><STRONG><a name="[17b]"></a>fs_fat_init_sector_cache</STRONG> (ARM, 92 bytes, Stack size 0 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
</UL>

<P><STRONG><a name="[2ca]"></a>FAT_dump_sector_cache</STRONG> (ARM, 24 bytes, Stack size 0 bytes, nvtfat_fat_table.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>fs_fat_flush_sector_cache</STRONG> (ARM, 412 bytes, Stack size 32 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_whole_sector_cache
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk
</UL>

<P><STRONG><a name="[203]"></a>fs_fat_check_out_sec</STRONG> (ARM, 92 bytes, Stack size 24 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_whole_sector_cache
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_out_fat_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
</UL>

<P><STRONG><a name="[22c]"></a>fs_fat_check_in_sec</STRONG> (ARM, 16 bytes, Stack size 0 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
</UL>

<P><STRONG><a name="[1af]"></a>fs_fat_clear_sector_cache</STRONG> (ARM, 112 bytes, Stack size 0 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk
</UL>

<P><STRONG><a name="[17c]"></a>fs_enable_iow_cache</STRONG> (ARM, 140 bytes, Stack size 8 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fs_enable_iow_cache &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
</UL>

<P><STRONG><a name="[1b0]"></a>fsFlushIOCache</STRONG> (ARM, 88 bytes, Stack size 16 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fsFlushIOCache &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_cache_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk
</UL>

<P><STRONG><a name="[201]"></a>fs_flush_iow_cache</STRONG> (ARM, 12 bytes, Stack size 8 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fs_flush_iow_cache &rArr; fsFlushIOCache &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFlushIOCache
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mkdir
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[2cb]"></a>fsInstallIoWriteCallBack</STRONG> (ARM, 4 bytes, Stack size 0 bytes, nvtfat_io.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>fsDiskWriteComplete</STRONG> (ARM, 4 bytes, Stack size 0 bytes, nvtfat_io.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>fsIOWrite</STRONG> (ARM, 608 bytes, Stack size 48 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ioc_block
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_ioc_block
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bOverlayWithCacheBlock
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCheckDriverPointer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
</UL>

<P><STRONG><a name="[1b4]"></a>fsIORead</STRONG> (ARM, 488 bytes, Stack size 64 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ioc_block
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_ioc_block
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bOverlayWithDirtyCache
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_cache_blocks
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCheckDriverPointer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_out_fat_sector
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
</UL>

<P><STRONG><a name="[188]"></a>read_fs_info</STRONG> (ARM, 1340 bytes, Stack size 72 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = read_fs_info &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_file_handle
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_file_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDiskFreeSpace
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
</UL>

<P><STRONG><a name="[1b5]"></a>fs_fat_parse_partition</STRONG> (ARM, 1184 bytes, Stack size 664 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = fs_fat_parse_partition &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDumpBufferHex
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMountLogicalDisk
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
</UL>

<P><STRONG><a name="[20b]"></a>lname_to_sname</STRONG> (ARM, 288 bytes, Stack size 40 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = lname_to_sname &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via BLX)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
</UL>

<P><STRONG><a name="[20d]"></a>sname_compare</STRONG> (ARM, 404 bytes, Stack size 64 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sname_compare &rArr; split_sname &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_sname
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
</UL>

<P><STRONG><a name="[214]"></a>fs_fat_delete_file</STRONG> (ARM, 868 bytes, Stack size 2200 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2824 + Unknown Stack Size
<LI>Call Chain = fs_fat_delete_file &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dir_empty
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToLowerCase
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rmdir
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delfile
</UL>

<P><STRONG><a name="[1a2]"></a>fs_fat_delete_tree</STRONG> (ARM, 764 bytes, Stack size 1168 bytes, nvtfat_ldisk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToLowerCase
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrCat
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIsFileOpened
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteDirTree
</UL>

<P><STRONG><a name="[191]"></a>fs_fat_merge_file</STRONG> (ARM, 1184 bytes, Stack size 2248 bytes, nvtfat_ldisk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToLowerCase
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMergeFile
</UL>

<P><STRONG><a name="[21a]"></a>fs_fat_create_file</STRONG> (ARM, 1244 bytes, Stack size 1192 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2176 + Unknown Stack Size
<LI>Call Chain = fs_fat_create_file &rArr; generate_short_name &rArr; fs_fat_get_next_dir_entry &rArr; __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_sdir_name
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_dire_info
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sdir_chksum
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[220]"></a>fs_fat_rename_file</STRONG> (ARM, 1376 bytes, Stack size 2776 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3760 + Unknown Stack Size
<LI>Call Chain = fs_fat_rename_file &rArr; generate_short_name &rArr; fs_fat_get_next_dir_entry &rArr; __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_sdir_name
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_free_dir_entry
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sdir_chksum
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToLowerCase
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_move
</UL>

<P><STRONG><a name="[17a]"></a>fs_init_sector_buffer</STRONG> (ARM, 48 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
</UL>

<P><STRONG><a name="[1b3]"></a>fsAllocateSector</STRONG> (ARM, 112 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
</UL>

<P><STRONG><a name="[1b6]"></a>fsFreeSector</STRONG> (ARM, 80 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
</UL>

<P><STRONG><a name="[187]"></a>fsToUpperCase</STRONG> (ARM, 40 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAssignDriveNumber
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vdisk
</UL>

<P><STRONG><a name="[1bd]"></a>fsFindLastSlash</STRONG> (ARM, 76 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName
</UL>

<P><STRONG><a name="[215]"></a>fsTruncatePath</STRONG> (ARM, 108 bytes, Stack size 16 bytes, nvtfat_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsTruncatePath &rArr; fsUnicodeCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindLastSlash
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
</UL>

<P><STRONG><a name="[224]"></a>unicode_wild_card_comapre</STRONG> (ARM, 256 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
</UL>

<P><STRONG><a name="[221]"></a>fsUnicodeWildCardCompare</STRONG> (ARM, 244 bytes, Stack size 1064 bytes, nvtfat_lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = fsUnicodeWildCardCompare &rArr; fsUnicodeCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unicode_wild_card_comapre
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last_dot
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToUpperCase
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
</UL>

<P><STRONG><a name="[209]"></a>fsDumpBufferHex</STRONG> (ARM, 72 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
</UL>

<P><STRONG><a name="[1f4]"></a>UMAS_DEBUG_ShowCommand</STRONG> (ARM, 2208 bytes, Stack size 16 bytes, umasdebug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = UMAS_DEBUG_ShowCommand &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_TransparentScsiCommand
</UL>

<P><STRONG><a name="[225]"></a>UMAS_DEBUG_PrintScsiCommand</STRONG> (ARM, 972 bytes, Stack size 48 bytes, umasdebug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>

<P><STRONG><a name="[226]"></a>UMAS_DEBUG_ShowSense</STRONG> (ARM, 5948 bytes, Stack size 88 bytes, umasdebug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[21b]"></a>fs_fat_set_sdir_name</STRONG> (ARM, 172 bytes, Stack size 24 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = fs_fat_set_sdir_name
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_info
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[210]"></a>fs_fat_get_sdir_name</STRONG> (ARM, 212 bytes, Stack size 24 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fs_fat_get_sdir_name &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat (via BLX)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_dire_info
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[227]"></a>fs_fat_get_ldir_name</STRONG> (ARM, 236 bytes, Stack size 48 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fs_fat_get_ldir_name
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
</UL>

<P><STRONG><a name="[21d]"></a>fs_fat_set_dire_mtime</STRONG> (ARM, 260 bytes, Stack size 48 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = fs_fat_set_dire_mtime &rArr; sysGetCurrentTime &rArr; sysUTC_To_DOS_Time
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[21e]"></a>fs_fat_get_dire_info</STRONG> (ARM, 236 bytes, Stack size 16 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fs_fat_get_dire_info &rArr; fs_fat_get_sdir_name &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[228]"></a>fs_fat_set_dire_info</STRONG> (ARM, 264 bytes, Stack size 16 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = fs_fat_set_dire_info &rArr; fs_fat_set_sdir_name
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_sdir_name
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
</UL>

<P><STRONG><a name="[22b]"></a>fs_fat_search_file</STRONG> (ARM, 660 bytes, Stack size 1400 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256 + Unknown Stack Size
<LI>Call Chain = fs_fat_search_file &rArr; search_file_in_directroy &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToUpperCase
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToAscii
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[2cd]"></a>fsInstallFileDelCallBack</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nvtfat_fop.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>fs_read_fat_table</STRONG> (ARM, 516 bytes, Stack size 56 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_check_in_sec
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_check_out_sec
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
</UL>

<P><STRONG><a name="[219]"></a>fs_write_fat_table</STRONG> (ARM, 676 bytes, Stack size 64 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = fs_write_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_check_in_sec
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_check_out_sec
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
</UL>

<P><STRONG><a name="[22d]"></a>fs_update_first_cluster</STRONG> (ARM, 196 bytes, Stack size 32 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fs_update_first_cluster &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[22e]"></a>fs_fat_allocate_cluster</STRONG> (ARM, 1000 bytes, Stack size 48 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = fs_fat_allocate_cluster &rArr; fs_write_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
</UL>

<P><STRONG><a name="[217]"></a>fs_fat_reclaim_clusters</STRONG> (ARM, 224 bytes, Stack size 32 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = fs_fat_reclaim_clusters &rArr; fs_write_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fs_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[230]"></a>fsRwDebug</STRONG> (ARM, 28 bytes, Stack size 16 bytes, nvtfat_fop.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL>

<P><STRONG><a name="[20f]"></a>fs_fat_get_next_dir_entry</STRONG> (ARM, 272 bytes, Stack size 40 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = fs_fat_get_next_dir_entry &rArr; __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_short_name
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_merge_file
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
</UL>

<P><STRONG><a name="[2ce]"></a>fs_fat_dump_fcb</STRONG> (ARM, 4 bytes, Stack size 0 bytes, nvtfat_fop.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABuffer (via BLX)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected (via BLX)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess (via BLX)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file (via BLX)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_ScanDeviceLun (via BLX)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice (via BLX)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster (via BLX)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen (via BLX)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFullDiskInfomation (via BLX)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk (via BLX)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records (via BLX)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindFirst (via BLX)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile (via BLX)
</UL>

<P><STRONG><a name="[81]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostFreeVABuffer (via BLX)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected (via BLX)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess (via BLX)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_file (via BLX)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskDisconnected (via BLX)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_ScanDeviceLun (via BLX)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice (via BLX)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_disconnect (via BLX)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster (via BLX)
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing (via BLX)
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose (via BLX)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen (via BLX)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition (via BLX)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReleaseDiskInformation (via BLX)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountPhysicalDisk (via BLX)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk (via BLX)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk (via BLX)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindClose (via BLX)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindNext (via BLX)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindFirst (via BLX)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCopyFile (via BLX)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[21f]"></a>__aeabi_ldivmod</STRONG> (ARM, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fsizing
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[237]"></a>_ll_sdiv</STRONG> (ARM, 80 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[8e]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test (via BLX)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RootHubString (via BLX)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change (via BLX)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file (via BLX)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file (via BLX)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname (via BLX)
</UL>

<P><STRONG><a name="[23b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[23c]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[23a]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[58]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via BLX)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
</UL>

<P><STRONG><a name="[241]"></a>_printf_longlong_hex</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[5a]"></a>_printf_int_hex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[242]"></a>_printf_hex_ptr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_hex_int_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[243]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via BLX)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[64]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via BLX)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7e]"></a>memcmp</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Compare (via BLX)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice (via BLX)
</UL>

<P><STRONG><a name="[97]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile (via BLX)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsDeleteFile (via BLX)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess (via BLX)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecTest (via BLX)
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file (via BLX)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root (via BLX)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy (via BLX)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sname_compare (via BLX)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_sname (via BLX)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetAsciiFileName (via BLX)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRemoveDirectory (via BLX)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMakeDirectory (via BLX)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile (via BLX)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsMergeFile (via BLX)
</UL>

<P><STRONG><a name="[b6]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_probe (via BLX)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile (via BLX)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe (via BLX)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change (via BLX)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name (via BLX)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname (via BLX)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem (via BLX)
</UL>

<P><STRONG><a name="[98]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess (via BLX)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecTest (via BLX)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name (via BLX)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname (via BLX)
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpegImage
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkTransport
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_configuration
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_interface
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_endpoint
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_port_status
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_hub_status
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_volume_label
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_scsi_command
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSense6to10
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSense10to6
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rh_submit_urb
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rh_send_irq
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetVolumeLabel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetVolumeLabel
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockDivSwitchStart
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockSwitchStart
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitDDRStart
</UL>

<P><STRONG><a name="[248]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2cf]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbvideo_IsocIrq
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegGetInfo
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_DEBUG_ShowSense
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_scsi_command
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFullDiskInfomation
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2d0]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JpegDecHeaderComplete
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbReset
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_sdir_name
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetVolumeLabel
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostClearVABuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkTransport
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitializeMemoryPool
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_rw_buff
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsTruncatePath
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSense10to6
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[24a]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[249]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegEncodeTrigger
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegDecodeTrigger
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateUrb
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Probe
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_probe
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsInitFileSystem
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PenDriverAccess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isochronous_Test
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_ScanDeviceLun
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_configuration
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_interface
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetConfiguration
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateDevice
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_probe
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_fat16_root
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_file_in_directroy
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_alloc_ohci
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_alloc_dev
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_submit_urb
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_enable_iow_cache
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_file_handle
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_file_handle
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[2d3]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[154]"></a>strncpy</STRONG> (ARM, 104 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname
</UL>

<P><STRONG><a name="[1a4]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sname_compare
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_tree
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[2d5]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_idivmod</STRONG> (ARM, 380 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbvideo_IsocIrq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_calc_bus_time
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_ldir_entry
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_int_ballance
</UL>

<P><STRONG><a name="[235]"></a>__rt_heap_descriptor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (via BLX)
</UL>

<P><STRONG><a name="[2d6]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[24e]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5e]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor (via BLX)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[251]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>__aeabi_uldivmod</STRONG> (ARM, 0 bytes, Stack size 24 bytes, lludiv5.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[2d8]"></a>_ll_udiv</STRONG> (ARM, 752 bytes, Stack size 24 bytes, lludiv5.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>_ll_udiv_donemoving</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv5.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[239]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[4f]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[252]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[254]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[23f]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via BLX)
</UL>

<P><STRONG><a name="[2da]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2db]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[255]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[24f]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[250]"></a>__rt_heap_escrow</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[24c]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[60]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[259]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[256]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2dc]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPLLOutputKhz
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_pointer
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysStartTimer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetSystemClock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLOutputKhz
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegOpen
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitUsbSystem
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToStr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CheckBandwidth
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_start
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysSetBaudRate
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetCurrentTime
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysUTC_To_DOS_Time
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClockDivSwitchStart
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetPLLControlRegister
</UL>

<P><STRONG><a name="[161]"></a>sys_flush_and_clean_dcache</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_dcache.o(MEM_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysFlushCache
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDisableCache
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_flush_and_clean_dcache
</UL>

<P><STRONG><a name="[1fe]"></a>sysSetupCP15</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_sysctl.o(SYS_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitMMUTable
</UL>

<P><STRONG><a name="[244]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_fdiv</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[25f]"></a>_fdiv</STRONG> (ARM, 396 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[262]"></a>_ffixu</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_i2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[2dd]"></a>_fflt</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_ui2f</STRONG> (ARM, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[2de]"></a>_ffltu</STRONG> (ARM, 40 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpegCalScalingFactor
</UL>

<P><STRONG><a name="[263]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[261]"></a>__fpl_fnaninf</STRONG> (ARM, 160 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[260]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7a]"></a>Action_Compare</STRONG> (ARM, 344 bytes, Stack size 16696 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetJpegImage
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test
</UL>

<P><STRONG><a name="[3b]"></a>usb_kbd_irq</STRONG> (ARM, 112 bytes, Stack size 16 bytes, usb_keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = usb_kbd_irq &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_keyboard.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>usb_kbd_led</STRONG> (ARM, 108 bytes, Stack size 16 bytes, usb_keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = usb_kbd_led &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SubmitUrb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_keyboard.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>usb_kbd_probe</STRONG> (ARM, 952 bytes, Stack size 104 bytes, usb_keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508 + Unknown Stack Size
<LI>Call Chain = usb_kbd_probe &rArr; USB_TranslateString &rArr; USB_GetStringDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_TranslateString
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetProtocol
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetIdle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBKeyboardOpen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_keyboard.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>usb_kbd_disconnect</STRONG> (ARM, 36 bytes, Stack size 16 bytes, usb_keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = usb_kbd_disconnect &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UnlinkUrb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_keyboard.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>__create_pipe</STRONG> (ARM, 28 bytes, Stack size 0 bytes, usb_keyboard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_kbd_probe
</UL>

<P><STRONG><a name="[b9]"></a>W99683Cam_DropFrameQueue</STRONG> (ARM, 124 bytes, Stack size 8 bytes, w99683.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = W99683Cam_DropFrameQueue &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_StopDataPump
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Disconnect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Open
</UL>

<P><STRONG><a name="[3d]"></a>usbvideo_IsocIrq</STRONG> (ARM, 876 bytes, Stack size 40 bytes, w99683.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = usbvideo_IsocIrq &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_available_memory
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SubmitUrb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w99683.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>W99683Cam_read_register</STRONG> (ARM, 160 bytes, Stack size 40 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_SetupOnOpen
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_check_sensor
</UL>

<P><STRONG><a name="[c2]"></a>W99683Cam_write_register</STRONG> (ARM, 152 bytes, Stack size 40 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_SetupOnOpen
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_check_sensor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_set_quantization_table
</UL>

<P><STRONG><a name="[c3]"></a>W99683Cam_I2C_read</STRONG> (ARM, 160 bytes, Stack size 48 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_check_sensor
</UL>

<P><STRONG><a name="[c4]"></a>W99683Cam_I2C_write</STRONG> (ARM, 304 bytes, Stack size 48 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_check_sensor
</UL>

<P><STRONG><a name="[c5]"></a>W99683Cam_set_quantization_table</STRONG> (ARM, 172 bytes, Stack size 24 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_SetupOnOpen
</UL>

<P><STRONG><a name="[c6]"></a>W99683Cam_check_sensor</STRONG> (ARM, 596 bytes, Stack size 16 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_I2C_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_I2C_read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_write_register
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_read_register
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_SetupOnOpen
</UL>

<P><STRONG><a name="[c7]"></a>W99683Cam_SetupOnOpen</STRONG> (ARM, 1692 bytes, Stack size 40 bytes, w99683.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_check_sensor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_set_quantization_table
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_write_register
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_read_register
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_Open
</UL>

<P><STRONG><a name="[11]"></a>W99683Cam_Disconnect</STRONG> (ARM, 460 bytes, Stack size 16 bytes, w99683.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = W99683Cam_Disconnect &rArr; USB_FreeDevice &rArr; USB_DestroyConfiguration &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeUrb
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_StopDataPump
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_DropFrameQueue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w99683.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>W99683Cam_Probe</STRONG> (ARM, 836 bytes, Stack size 40 bytes, w99683.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = W99683Cam_Probe &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IncreaseDeviceUser
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w99683.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>__create_pipe</STRONG> (ARM, 28 bytes, Stack size 0 bytes, w99683.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_StartDataPump
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_I2C_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_I2C_read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_write_register
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W99683Cam_read_register
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbvideo_IsocIrq
</UL>

<P><STRONG><a name="[33]"></a>Undefined_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undefined_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[34]"></a>SWI_Handler1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[35]"></a>Prefetch_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prefetch_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[36]"></a>Abort_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abort_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[37]"></a>IRQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[38]"></a>FIQ_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, wb_init.o(WB_INIT))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wb_init.o(WB_INIT)
</UL>
<P><STRONG><a name="[e9]"></a>shift_pointer</STRONG> (ARM, 72 bytes, Stack size 24 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = shift_pointer
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostAllocVABuffer
</UL>

<P><STRONG><a name="[3e]"></a>vpostISR</STRONG> (ARM, 288 bytes, Stack size 8 bytes, w55fa93_vpost_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vpostISR
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostIsIntEnabled
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostClearInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w55fa93_vpost_driver.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>GetPLLOutputKhz</STRONG> (ARM, 128 bytes, Stack size 40 bytes, w55fa93_vpost_hannstar_hsd043i9w1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GetPLLOutputKhz
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vpostLCMInit_HANNSTAR_HSD043I9W1
</UL>

<P><STRONG><a name="[120]"></a>list_add</STRONG> (ARM, 28 bytes, Stack size 0 bytes, hub.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_probe
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_irq
</UL>

<P><STRONG><a name="[101]"></a>usb_get_hub_descriptor</STRONG> (ARM, 100 bytes, Stack size 40 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = usb_get_hub_descriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
</UL>

<P><STRONG><a name="[103]"></a>usb_clear_hub_feature</STRONG> (ARM, 96 bytes, Stack size 40 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = usb_clear_hub_feature &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
</UL>

<P><STRONG><a name="[104]"></a>usb_clear_port_feature</STRONG> (ARM, 104 bytes, Stack size 40 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = usb_clear_port_feature &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbClearFeature
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_disable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_reset
</UL>

<P><STRONG><a name="[105]"></a>usb_set_port_feature</STRONG> (ARM, 104 bytes, Stack size 40 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = usb_set_port_feature &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_reset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_power_on
</UL>

<P><STRONG><a name="[106]"></a>usb_get_hub_status</STRONG> (ARM, 136 bytes, Stack size 48 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = usb_get_hub_status &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
</UL>

<P><STRONG><a name="[107]"></a>usb_get_port_status</STRONG> (ARM, 152 bytes, Stack size 48 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = usb_get_port_status &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_wait_reset
</UL>

<P><STRONG><a name="[108]"></a>usb_hub_power_on</STRONG> (ARM, 72 bytes, Stack size 16 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = usb_hub_power_on &rArr; usb_set_port_feature &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_port_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_reset
</UL>

<P><STRONG><a name="[10a]"></a>usb_hub_port_wait_reset</STRONG> (ARM, 240 bytes, Stack size 40 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = usb_hub_port_wait_reset &rArr; usb_get_port_status &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_port_status
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_reset
</UL>

<P><STRONG><a name="[10b]"></a>usb_hub_port_reset</STRONG> (ARM, 164 bytes, Stack size 24 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = usb_hub_port_reset &rArr; usb_hub_port_wait_reset &rArr; usb_get_port_status &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_wait_reset
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_port_feature
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_port_feature
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_connect_change
</UL>

<P><STRONG><a name="[10c]"></a>usb_hub_port_connect_change</STRONG> (ARM, 1004 bytes, Stack size 72 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = usb_hub_port_connect_change &rArr; USB_SettleNewDevice &rArr; USB_ShowUsbString &rArr; USB_TranslateString &rArr; USB_GetStringDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisconnectDevice
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConnectDevice
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateDevice
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_disable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_port_reset
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_port_feature
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
</UL>

<P><STRONG><a name="[111]"></a>usb_hub_disconnect</STRONG> (ARM, 96 bytes, Stack size 16 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = usb_hub_disconnect &rArr; USB_DisconnectDevice &rArr;  USB_DisconnectDevice (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisconnectDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
</UL>

<P><STRONG><a name="[11b]"></a>usb_hub_reset</STRONG> (ARM, 164 bytes, Stack size 16 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = usb_hub_reset &rArr; USB_ResetDevice &rArr; usb_hub_port_reset &rArr; usb_hub_port_wait_reset &rArr; usb_get_port_status &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UnlinkUrb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SubmitUrb
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisconnectDevice
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetDevice
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_power_on
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
</UL>

<P><STRONG><a name="[3f]"></a>hub_irq</STRONG> (ARM, 128 bytes, Stack size 16 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hub_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>usb_hub_configure</STRONG> (ARM, 968 bytes, Stack size 56 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = usb_hub_configure &rArr; usb_hub_power_on &rArr; usb_set_port_feature &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateUrb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SubmitUrb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_power_on
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_hub_status
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_hub_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_probe
</UL>

<P><STRONG><a name="[12]"></a>hub_probe</STRONG> (ARM, 724 bytes, Stack size 32 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = hub_probe &rArr; usb_hub_configure &rArr; usb_hub_power_on &rArr; usb_set_port_feature &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>hub_disconnect</STRONG> (ARM, 168 bytes, Stack size 16 bytes, hub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = hub_disconnect &rArr; USB_FreeUrb &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeUrb
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UnlinkUrb
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>hub_ioctl</STRONG> (ARM, 12 bytes, Stack size 0 bytes, hub.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> hub.o(.data)
</UL>
<P><STRONG><a name="[102]"></a>__create_pipe</STRONG> (ARM, 28 bytes, Stack size 0 bytes, hub.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_configure
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_port_status
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_hub_status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_set_port_feature
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_port_feature
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_clear_hub_feature
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_get_hub_descriptor
</UL>

<P><STRONG><a name="[11e]"></a>list_del</STRONG> (ARM, 20 bytes, Stack size 0 bytes, hub.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_disconnect
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_probe
</UL>

<P><STRONG><a name="[11d]"></a>list_empty</STRONG> (ARM, 32 bytes, Stack size 0 bytes, hub.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_hub_events
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hub_irq
</UL>

<P><STRONG><a name="[12d]"></a>__list_add</STRONG> (ARM, 20 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RegisterDriver
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RegisterBus
</UL>

<P><STRONG><a name="[127]"></a>usb_find_interface_driver</STRONG> (ARM, 352 bytes, Stack size 40 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = usb_find_interface_driver &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InterfaceClaimed
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_match_id
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriverClaimInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_find_drivers
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_drivers_purge
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_check_support
</UL>

<P><STRONG><a name="[12b]"></a>usb_check_support</STRONG> (ARM, 152 bytes, Stack size 16 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = usb_check_support &rArr;  usb_check_support (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_check_support
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_find_interface_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ScanDevices
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_check_support
</UL>

<P><STRONG><a name="[12e]"></a>usb_drivers_purge</STRONG> (ARM, 204 bytes, Stack size 24 bytes, usb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriverReleaseInterface
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_drivers_purge
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_find_interface_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeregisterDriver
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_drivers_purge
</UL>

<P><STRONG><a name="[138]"></a>usb_find_drivers</STRONG> (ARM, 144 bytes, Stack size 24 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = usb_find_drivers &rArr; usb_find_interface_driver &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ShowDevice
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InterfaceClaimed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_find_interface_driver
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
</UL>

<P><STRONG><a name="[40]"></a>usb_api_blocking_completion</STRONG> (ARM, 16 bytes, Stack size 0 bytes, usb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>usb_start_wait_urb</STRONG> (ARM, 256 bytes, Stack size 24 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = usb_start_wait_urb &rArr; USB_FreeUrb &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeUrb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UnlinkUrb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SubmitUrb
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendBulkMessage
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_internal_control_msg
</UL>

<P><STRONG><a name="[13b]"></a>usb_internal_control_msg</STRONG> (ARM, 188 bytes, Stack size 40 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateUrb
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_start_wait_urb
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
</UL>

<P><STRONG><a name="[13d]"></a>usb_parse_endpoint</STRONG> (ARM, 416 bytes, Stack size 40 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = usb_parse_endpoint &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_interface
</UL>

<P><STRONG><a name="[13e]"></a>usb_parse_interface</STRONG> (ARM, 1308 bytes, Stack size 72 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = usb_parse_interface &rArr; usb_parse_endpoint &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_endpoint
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_configuration
</UL>

<P><STRONG><a name="[13f]"></a>usb_parse_configuration</STRONG> (ARM, 492 bytes, Stack size 56 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = usb_parse_configuration &rArr; usb_parse_interface &rArr; usb_parse_endpoint &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_parse_interface
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetConfiguration
</UL>

<P><STRONG><a name="[141]"></a>ascii2utf</STRONG> (ARM, 68 bytes, Stack size 8 bytes, usb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ascii2utf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RootHubString
</UL>

<P><STRONG><a name="[143]"></a>__create_pipe</STRONG> (ARM, 28 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetInterface
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetProtocol
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetIdle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetReport
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetReport
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClearHalt
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetProtocol
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStatus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetStringDescriptor
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetClassDescriptor
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetConfiguration
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDescriptor
</UL>

<P><STRONG><a name="[130]"></a>list_del</STRONG> (ARM, 20 bytes, Stack size 0 bytes, usb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeregisterDriver
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_deregister_bus
</UL>

<P><STRONG><a name="[153]"></a>make_guid</STRONG> (ARM, 168 bytes, Stack size 8 bytes, umasdriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = make_guid
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
</UL>

<P><STRONG><a name="[152]"></a>usb_stor_allocate_irq</STRONG> (ARM, 336 bytes, Stack size 24 bytes, umasdriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = usb_stor_allocate_irq &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeUrb
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateUrb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SubmitUrb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storage_probe
</UL>

<P><STRONG><a name="[15]"></a>storage_probe</STRONG> (ARM, 2844 bytes, Stack size 856 bytes, umasdriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1856 + Unknown Stack Size
<LI>Call Chain = storage_probe &rArr; UMAS_InitUmasDevice &rArr; fsPhysicalDiskConnected &rArr; parse_partition_records &rArr;  parse_partition_records (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IncreaseDeviceUser
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeUrb
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateUrb
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkMaxLun
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_allocate_irq
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_guid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasdriver.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>storage_disconnect</STRONG> (ARM, 744 bytes, Stack size 32 bytes, umasdriver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = storage_disconnect &rArr; fsPhysicalDiskDisconnected &rArr; fsUnmountPhysicalDisk &rArr; fsCloseFile &rArr; unlink_file_from_disk &rArr; fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeUrb
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_UnlinkUrb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskDisconnected
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasdriver.o(.data)
</UL>
<P><STRONG><a name="[172]"></a>sysSetBaudRate</STRONG> (ARM, 56 bytes, Stack size 16 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sysSetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInitializeUART
</UL>

<P><STRONG><a name="[175]"></a>sysPutRepChar</STRONG> (ARM, 40 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysPutRepChar
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[176]"></a>sysPutStringReverse</STRONG> (ARM, 40 bytes, Stack size 12 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
</UL>

<P><STRONG><a name="[177]"></a>sysPutNumber</STRONG> (ARM, 444 bytes, Stack size 80 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutStringReverse
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatItem
</UL>

<P><STRONG><a name="[178]"></a>FormatItem</STRONG> (ARM, 540 bytes, Stack size 40 bytes, wb_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutString
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutChar_f
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutNumber
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPutRepChar
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPrintf
</UL>

<P><STRONG><a name="[17e]"></a>unlink_file_from_disk</STRONG> (ARM, 168 bytes, Stack size 16 bytes, nvtfat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = unlink_file_from_disk &rArr; fsUnmountLogicalDisk &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
</UL>

<P><STRONG><a name="[180]"></a>get_slot_index</STRONG> (ARM, 88 bytes, Stack size 0 bytes, nvtfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileSize
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindClose
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindNext
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindFirst
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsRenameFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileTime
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileAttribute
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileStatus
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFileStatus
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIsEOF
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsSetFileSize
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL>

<P><STRONG><a name="[18f]"></a>link_file_to_disk</STRONG> (ARM, 104 bytes, Stack size 0 bytes, nvtfat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
</UL>

<P><STRONG><a name="[1a3]"></a>get_subdir_info</STRONG> (ARM, 432 bytes, Stack size 1208 bytes, nvtfat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrLen
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeStrCat
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindClose
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindNext
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFindFirst
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetDirectoryInfo2
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetDirectoryInfo
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_subdir_info
</UL>

<P><STRONG><a name="[1aa]"></a>add_new_disk_driver</STRONG> (ARM, 84 bytes, Stack size 8 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = add_new_disk_driver
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCheckDriverPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
</UL>

<P><STRONG><a name="[1ad]"></a>allocate_drive_number</STRONG> (ARM, 372 bytes, Stack size 32 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = allocate_drive_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateDisk
</UL>

<P><STRONG><a name="[1b1]"></a>release_drive_number</STRONG> (ARM, 96 bytes, Stack size 0 bytes, nvtfat_disk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnmountLogicalDisk
</UL>

<P><STRONG><a name="[1b2]"></a>parse_partition_records</STRONG> (ARM, 1044 bytes, Stack size 120 bytes, nvtfat_disk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = parse_partition_records &rArr;  parse_partition_records (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_parse_partition
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsPhysicalDiskConnected
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_partition_records
</UL>

<P><STRONG><a name="[1d4]"></a>TD_CompletionCode</STRONG> (ARM, 184 bytes, Stack size 0 bytes, usb-ohci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_reverse_done_list
</UL>

<P><STRONG><a name="[1bf]"></a>urb_free_priv</STRONG> (ARM, 76 bytes, Stack size 16 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = urb_free_priv &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_submit_urb
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urb_rm_priv_locked
</UL>

<P><STRONG><a name="[1c0]"></a>urb_rm_priv_locked</STRONG> (ARM, 156 bytes, Stack size 16 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = urb_rm_priv_locked &rArr; USB_FreeDevice &rArr; USB_DestroyConfiguration &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReleaseBandwidth
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urb_free_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urb_rm_priv
</UL>

<P><STRONG><a name="[1c2]"></a>urb_rm_priv</STRONG> (ARM, 20 bytes, Stack size 8 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = urb_rm_priv &rArr; urb_rm_priv_locked &rArr; USB_FreeDevice &rArr; USB_DestroyConfiguration &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urb_rm_priv_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_unlink_urb
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_return_urb
</UL>

<P><STRONG><a name="[1d0]"></a>urb_print</STRONG> (ARM, 356 bytes, Stack size 12 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = urb_print
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_unlink_urb
</UL>

<P><STRONG><a name="[1c3]"></a>iso_td_fill</STRONG> (ARM, 432 bytes, Stack size 56 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = iso_td_fill &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;td_submit_urb
</UL>

<P><STRONG><a name="[1c4]"></a>td_fill</STRONG> (ARM, 260 bytes, Stack size 40 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = td_fill &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;td_submit_urb
</UL>

<P><STRONG><a name="[1c5]"></a>td_submit_urb</STRONG> (ARM, 852 bytes, Stack size 48 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = td_submit_urb &rArr; iso_td_fill &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;td_fill
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso_td_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_submit_urb
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_return_urb
</UL>

<P><STRONG><a name="[1c6]"></a>sohci_return_urb</STRONG> (ARM, 228 bytes, Stack size 16 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = sohci_return_urb &rArr; td_submit_urb &rArr; iso_td_fill &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;td_submit_urb
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urb_rm_priv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_done_list
</UL>

<P><STRONG><a name="[1ca]"></a>ep_rev</STRONG> (ARM, 60 bytes, Stack size 8 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ep_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_unlink
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_link
</UL>

<P><STRONG><a name="[1c7]"></a>ep_int_ballance</STRONG> (ARM, 132 bytes, Stack size 24 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ep_int_ballance &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_link
</UL>

<P><STRONG><a name="[1c9]"></a>ep_2_n_interval</STRONG> (ARM, 104 bytes, Stack size 0 bytes, usb-ohci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_link
</UL>

<P><STRONG><a name="[1c8]"></a>ep_link</STRONG> (ARM, 664 bytes, Stack size 40 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ep_link &rArr; ep_int_ballance &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_2_n_interval
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_int_ballance
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_submit_urb
</UL>

<P><STRONG><a name="[1cb]"></a>ep_add_ed</STRONG> (ARM, 456 bytes, Stack size 40 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = ep_add_ed &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_submit_urb
</UL>

<P><STRONG><a name="[1cc]"></a>rh_send_irq</STRONG> (ARM, 360 bytes, Stack size 40 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = rh_send_irq &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_int_timer_do
</UL>

<P><STRONG><a name="[1cd]"></a>rh_submit_urb</STRONG> (ARM, 2156 bytes, Stack size 80 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = rh_submit_urb &rArr; USB_FreeDevice &rArr; USB_DestroyConfiguration &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RootHubString
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_int_timer_do
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_submit_urb
</UL>

<P><STRONG><a name="[1b]"></a>sohci_submit_urb</STRONG> (ARM, 968 bytes, Stack size 40 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = sohci_submit_urb &rArr; rh_submit_urb &rArr; USB_FreeDevice &rArr; USB_DestroyConfiguration &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IncreaseDeviceUser
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ClaimBandwidth
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CheckBandwidth
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rh_submit_urb
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_add_ed
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_link
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;td_submit_urb
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urb_free_priv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb-ohci.o(.data)
</UL>
<P><STRONG><a name="[1d1]"></a>ep_rm_ed</STRONG> (ARM, 232 bytes, Stack size 8 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ep_rm_ed
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_free_dev
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_unlink_urb
</UL>

<P><STRONG><a name="[1cf]"></a>rh_unlink_urb</STRONG> (ARM, 128 bytes, Stack size 16 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = rh_unlink_urb &rArr; USB_FreeDevice &rArr; USB_DestroyConfiguration &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_unlink_urb
</UL>

<P><STRONG><a name="[1c]"></a>sohci_unlink_urb</STRONG> (ARM, 400 bytes, Stack size 16 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = sohci_unlink_urb &rArr; urb_rm_priv &rArr; urb_rm_priv_locked &rArr; USB_FreeDevice &rArr; USB_DestroyConfiguration &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rh_unlink_urb
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_rm_ed
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urb_print
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urb_rm_priv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb-ohci.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>sohci_alloc_dev</STRONG> (ARM, 64 bytes, Stack size 16 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = sohci_alloc_dev &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb-ohci.o(.data)
</UL>
<P><STRONG><a name="[1d2]"></a>ep_unlink</STRONG> (ARM, 748 bytes, Stack size 40 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ep_unlink &rArr; ep_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_done_list
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_del_list
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_free_dev
</UL>

<P><STRONG><a name="[19]"></a>sohci_free_dev</STRONG> (ARM, 244 bytes, Stack size 32 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = sohci_free_dev &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_unlink
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_rm_ed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb-ohci.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>sohci_get_current_frame_number</STRONG> (ARM, 24 bytes, Stack size 0 bytes, usb-ohci.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usb-ohci.o(.data)
</UL>
<P><STRONG><a name="[1d6]"></a>dl_transfer_length</STRONG> (ARM, 476 bytes, Stack size 36 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dl_transfer_length
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_done_list
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_del_list
</UL>

<P><STRONG><a name="[1d7]"></a>dl_del_urb</STRONG> (ARM, 68 bytes, Stack size 8 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dl_del_urb
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_done_list
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_del_list
</UL>

<P><STRONG><a name="[1d3]"></a>dl_reverse_done_list</STRONG> (ARM, 456 bytes, Stack size 32 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = dl_reverse_done_list &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD_CompletionCode
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_irq
</UL>

<P><STRONG><a name="[1d5]"></a>dl_del_list</STRONG> (ARM, 808 bytes, Stack size 64 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = dl_del_list &rArr; USB_free &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_del_urb
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_transfer_length
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_irq
</UL>

<P><STRONG><a name="[1d8]"></a>dl_done_list</STRONG> (ARM, 332 bytes, Stack size 48 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = dl_done_list &rArr; sohci_return_urb &rArr; td_submit_urb &rArr; iso_td_fill &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_del_urb
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_transfer_length
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ep_unlink
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sohci_return_urb
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_irq
</UL>

<P><STRONG><a name="[1d9]"></a>hc_reset</STRONG> (ARM, 148 bytes, Stack size 16 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = hc_reset &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ohci_irq
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbInitializeOHCI
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_restart
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_release_ohci
</UL>

<P><STRONG><a name="[1da]"></a>hc_start</STRONG> (ARM, 524 bytes, Stack size 32 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476 + Unknown Stack Size
<LI>Call Chain = hc_start &rArr; USB_SettleNewDevice &rArr; USB_ShowUsbString &rArr; USB_TranslateString &rArr; USB_GetStringDescriptor &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WaitMiliseconds
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeDevice
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SettleNewDevice
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ConnectDevice
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateDevice
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbInitializeOHCI
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_restart
</UL>

<P><STRONG><a name="[1db]"></a>hc_alloc_ohci</STRONG> (ARM, 216 bytes, Stack size 16 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = hc_alloc_ohci &rArr; USB_AllocateBus &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AllocateBus
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbInitializeOHCI
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbDeInitOHCI
</UL>

<P><STRONG><a name="[1dc]"></a>hc_release_ohci</STRONG> (ARM, 156 bytes, Stack size 8 bytes, usb-ohci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276 + Unknown Stack Size
<LI>Call Chain = hc_release_ohci &rArr; USB_DisconnectDevice &rArr;  USB_DisconnectDevice (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_deregister_bus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FreeBus
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisconnectDevice
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbInitializeOHCI
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsbDeInitOHCI
</UL>

<P><STRONG><a name="[1dd]"></a>hc_restart</STRONG> (ARM, 200 bytes, Stack size 16 bytes, usb-ohci.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisconnectDevice
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_start
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OHCI_Resume
</UL>

<P><STRONG><a name="[1e0]"></a>usb_show_endpoint</STRONG> (ARM, 20 bytes, Stack size 8 bytes, usb-debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_show_endpoint &rArr; USB_ShowEndpointDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ShowEndpointDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_show_interface
</UL>

<P><STRONG><a name="[1e2]"></a>usb_show_interface</STRONG> (ARM, 60 bytes, Stack size 16 bytes, usb-debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_show_interface &rArr; usb_show_endpoint &rArr; USB_ShowEndpointDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ShowInterfaceDescriptor
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_show_endpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_show_config
</UL>

<P><STRONG><a name="[1e4]"></a>usb_show_config</STRONG> (ARM, 112 bytes, Stack size 24 bytes, usb-debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usb_show_config &rArr; usb_show_interface &rArr; usb_show_endpoint &rArr; USB_ShowEndpointDescriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ShowConfigurationDescriptor
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_show_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ShowDevice
</UL>

<P><STRONG><a name="[1e7]"></a>usb_stor_transfer_length</STRONG> (ARM, 800 bytes, Stack size 32 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = usb_stor_transfer_length &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbiTransport
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbTransport
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkTransport
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_transfer
</UL>

<P><STRONG><a name="[1e8]"></a>clear_halt</STRONG> (ARM, 268 bytes, Stack size 48 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = clear_halt &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SendControlMessage
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbiTransport
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbTransport
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbReset
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkTransport
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkReset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkMaxLun
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_transfer_partial
</UL>

<P><STRONG><a name="[4e]"></a>usb_stor_blocking_completion</STRONG> (ARM, 16 bytes, Stack size 0 bytes, umastransport.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> umastransport.o(.text)
</UL>
<P><STRONG><a name="[1ea]"></a>usb_stor_control_msg</STRONG> (ARM, 528 bytes, Stack size 40 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = usb_stor_control_msg &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_malloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_free
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SubmitUrb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_urb_completed
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbiTransport
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbTransport
</UL>

<P><STRONG><a name="[1ec]"></a>usb_stor_bulk_msg</STRONG> (ARM, 252 bytes, Stack size 40 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = usb_stor_bulk_msg &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SubmitUrb
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_urb_completed
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkTransport
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_transfer_partial
</UL>

<P><STRONG><a name="[1ed]"></a>usb_stor_transfer_partial</STRONG> (ARM, 452 bytes, Stack size 32 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = usb_stor_transfer_partial &rArr; clear_halt &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__create_pipe
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_bulk_msg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_halt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_transfer
</UL>

<P><STRONG><a name="[1ee]"></a>us_transfer</STRONG> (ARM, 232 bytes, Stack size 32 bytes, umastransport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = us_transfer &rArr; usb_stor_transfer_partial &rArr; clear_halt &rArr; USB_SendControlMessage &rArr; usb_internal_control_msg &rArr; USB_AllocateUrb &rArr; USB_malloc &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_transfer_partial
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_transfer_length
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbiTransport
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbTransport
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkTransport
</UL>

<P><STRONG><a name="[1e9]"></a>__create_pipe</STRONG> (ARM, 28 bytes, Stack size 0 bytes, umastransport.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbiTransport
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbTransport
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_CbReset
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkTransport
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkReset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_BulkMaxLun
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_transfer_partial
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_halt
</UL>

<P><STRONG><a name="[1f0]"></a>usb_stor_scsiSenseParseBuffer</STRONG> (ARM, 308 bytes, Stack size 56 bytes, umasprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = usb_stor_scsiSenseParseBuffer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSense6to10
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSense10to6
</UL>

<P><STRONG><a name="[1f1]"></a>usb_stor_scsiSense10to6</STRONG> (ARM, 952 bytes, Stack size 104 bytes, umasprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = usb_stor_scsiSense10to6 &rArr; usb_stor_scsiSenseParseBuffer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSenseParseBuffer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_UfiCommand
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_AtapiCommand
</UL>

<P><STRONG><a name="[1f2]"></a>usb_stor_scsiSense6to10</STRONG> (ARM, 1084 bytes, Stack size 120 bytes, umasprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = usb_stor_scsiSense6to10 &rArr; usb_stor_scsiSenseParseBuffer &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_stor_scsiSenseParseBuffer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_UfiCommand
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_AtapiCommand
</UL>

<P><STRONG><a name="[1f3]"></a>fix_inquiry_data</STRONG> (ARM, 80 bytes, Stack size 16 bytes, umasprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = fix_inquiry_data &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_UfiCommand
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_TransparentScsiCommand
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_Qic157Command
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_AtapiCommand
</UL>

<P><STRONG><a name="[1f5]"></a>run_scsi_command</STRONG> (ARM, 300 bytes, Stack size 16 bytes, umasscsiglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = run_scsi_command &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_ScanDeviceLun
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMAS_InitUmasDevice
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_sense
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_unit_ready
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umas_disk_write
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;umas_disk_read
</UL>

<P><STRONG><a name="[1d]"></a>umas_disk_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, umasscsiglue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> umasscsiglue.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>umas_disk_ioctl</STRONG> (ARM, 12 bytes, Stack size 0 bytes, umasscsiglue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> umasscsiglue.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>umas_disk_read</STRONG> (ARM, 356 bytes, Stack size 40 bytes, umasscsiglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = umas_disk_read &rArr; run_scsi_command &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_scsi_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasscsiglue.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>umas_disk_write</STRONG> (ARM, 544 bytes, Stack size 40 bytes, umasscsiglue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = umas_disk_write &rArr; run_scsi_command &rArr; sysprintf &rArr; FormatItem &rArr; sysPutNumber &rArr; sysPutStringReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysprintf
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_scsi_command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umasscsiglue.o(.data)
</UL>
<P><STRONG><a name="[1ff]"></a>check_out_fat_sector</STRONG> (ARM, 452 bytes, Stack size 32 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_check_out_sec
</UL>

<P><STRONG><a name="[202]"></a>fs_flush_whole_sector_cache</STRONG> (ARM, 40 bytes, Stack size 8 bytes, nvtfat_fat_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fs_flush_whole_sector_cache &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_check_out_sec
</UL>

<P><STRONG><a name="[204]"></a>flush_cache_blocks</STRONG> (ARM, 440 bytes, Stack size 40 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flush_cache_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ioc_block
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFlushIOCache
</UL>

<P><STRONG><a name="[206]"></a>bOverlayWithCacheBlock</STRONG> (ARM, 104 bytes, Stack size 0 bytes, nvtfat_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
</UL>

<P><STRONG><a name="[208]"></a>bOverlayWithDirtyCache</STRONG> (ARM, 132 bytes, Stack size 12 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bOverlayWithDirtyCache
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
</UL>

<P><STRONG><a name="[207]"></a>find_ioc_block</STRONG> (ARM, 92 bytes, Stack size 0 bytes, nvtfat_io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
</UL>

<P><STRONG><a name="[205]"></a>get_ioc_block</STRONG> (ARM, 240 bytes, Stack size 32 bytes, nvtfat_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysGetTicks
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flush_cache_blocks
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
</UL>

<P><STRONG><a name="[20c]"></a>split_sname</STRONG> (ARM, 108 bytes, Stack size 24 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = split_sname &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sname_compare
</UL>

<P><STRONG><a name="[20e]"></a>generate_short_name</STRONG> (ARM, 256 bytes, Stack size 608 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = generate_short_name &rArr; fs_fat_get_next_dir_entry &rArr; __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sname_compare
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lname_to_sname
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUpperCase
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[21c]"></a>get_sdir_chksum</STRONG> (ARM, 80 bytes, Stack size 8 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_sdir_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[211]"></a>check_dir_empty</STRONG> (ARM, 360 bytes, Stack size 56 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = check_dir_empty &rArr; fsFileSeek &rArr; fsSetFileSize &rArr;  fsOpenFile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsGetFilePosition
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
</UL>

<P><STRONG><a name="[212]"></a>build_ldir_entry</STRONG> (ARM, 332 bytes, Stack size 32 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = build_ldir_entry &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[213]"></a>find_free_dir_entry</STRONG> (ARM, 316 bytes, Stack size 80 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = find_free_dir_entry &rArr; fsFileSeek &rArr; fsSetFileSize &rArr;  fsOpenFile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsHandleToDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
</UL>

<P><STRONG><a name="[21]"></a>_delfile</STRONG> (ARM, 40 bytes, Stack size 16 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2840 + Unknown Stack Size
<LI>Call Chain = _delfile &rArr; fs_fat_delete_file &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_ldisk.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>_mkdir</STRONG> (ARM, 160 bytes, Stack size 24 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _mkdir &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flush_iow_cache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_ldisk.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>_rmdir</STRONG> (ARM, 40 bytes, Stack size 16 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2840 + Unknown Stack Size
<LI>Call Chain = _rmdir &rArr; fs_fat_delete_file &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_delete_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_ldisk.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>_move</STRONG> (ARM, 52 bytes, Stack size 40 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3800 + Unknown Stack Size
<LI>Call Chain = _move &rArr; fs_fat_rename_file &rArr; generate_short_name &rArr; fs_fat_get_next_dir_entry &rArr; __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_rename_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_ldisk.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>_volume_label</STRONG> (ARM, 584 bytes, Stack size 96 bytes, nvtfat_ldisk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = _volume_label &rArr; fsOpenFile &rArr; fsGetAsciiFileName &rArr; fsUnicodeToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsWriteFile
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsReadFile
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsOpenFile
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsCloseFile
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFileSeek
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_ldisk.o(.data)
</UL>
<P><STRONG><a name="[222]"></a>find_last_dot</STRONG> (ARM, 76 bytes, Stack size 0 bytes, nvtfat_lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
</UL>

<P><STRONG><a name="[229]"></a>search_file_in_directroy</STRONG> (ARM, 756 bytes, Stack size 608 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = search_file_in_directroy &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_dire_info
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
</UL>

<P><STRONG><a name="[22a]"></a>search_file_in_fat16_root</STRONG> (ARM, 644 bytes, Stack size 600 bytes, nvtfat_dir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = search_file_in_fat16_root &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_ldir_name
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_dire_info
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiNonCaseCompare
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
</UL>

<P><STRONG><a name="[22f]"></a>alloc_rw_buff</STRONG> (ARM, 128 bytes, Stack size 16 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alloc_rw_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
</UL>

<P><STRONG><a name="[28]"></a>__fwrite</STRONG> (ARM, 1552 bytes, Stack size 88 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = __fwrite &rArr; fs_fat_allocate_cluster &rArr; fs_write_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_rw_buff
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>__fseek</STRONG> (ARM, 636 bytes, Stack size 64 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = __fseek &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>__fopen</STRONG> (ARM, 1460 bytes, Stack size 88 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344 + Unknown Stack Size
<LI>Call Chain = __fopen &rArr; fs_fat_search_file &rArr; search_file_in_directroy &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc (via BLX)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fwrite
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_search_file
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_create_file
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>__fclose</STRONG> (ARM, 436 bytes, Stack size 64 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __fclose &rArr; fs_fat_flush_sector_cache &rArr; fsIOWrite &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_info
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_set_dire_mtime
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFreeSector
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsFlushIOCache
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAllocateSector
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>__fread</STRONG> (ARM, 1408 bytes, Stack size 88 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = __fread &rArr; fs_read_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_rw_buff
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIOWrite
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsIORead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>__fsizing</STRONG> (ARM, 1124 bytes, Stack size 56 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = __fsizing &rArr; fs_fat_allocate_cluster &rArr; fs_write_fat_table &rArr; fs_fat_check_out_sec &rArr; check_out_fat_sector &rArr; fsIORead &rArr; get_ioc_block &rArr; flush_cache_blocks
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free (via BLX)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_allocate_cluster
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_update_first_cluster
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write_fat_table
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read_fat_table
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_reclaim_clusters
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_flush_sector_cache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>__fget_stat</STRONG> (ARM, 340 bytes, Stack size 0 bytes, nvtfat_fop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>__fset_stat</STRONG> (ARM, 316 bytes, Stack size 0 bytes, nvtfat_fop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[231]"></a>find_file</STRONG> (ARM, 840 bytes, Stack size 632 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1704 + Unknown Stack Size
<LI>Call Chain = find_file &rArr; fsUnicodeWildCardCompare &rArr; fsUnicodeCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsAsciiToUnicode
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fread
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeWildCardCompare
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_sdir_name
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_fat_get_next_dir_entry
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeToLowerCase
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeCopyStr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL>

<P><STRONG><a name="[233]"></a>creation_time_compare</STRONG> (ARM, 300 bytes, Stack size 0 bytes, nvtfat_fop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL>

<P><STRONG><a name="[234]"></a>modification_time_compare</STRONG> (ARM, 300 bytes, Stack size 0 bytes, nvtfat_fop.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL>

<P><STRONG><a name="[232]"></a>find_fileEx</STRONG> (ARM, 1704 bytes, Stack size 56 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = find_fileEx &rArr; find_file &rArr; fsUnicodeWildCardCompare &rArr; fsUnicodeCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modification_time_compare
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;creation_time_compare
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_file
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fseek
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsUnicodeNonCaseCompare
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__find_next
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__find_first
</UL>

<P><STRONG><a name="[2e]"></a>__find_first</STRONG> (ARM, 96 bytes, Stack size 16 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = __find_first &rArr; find_fileEx &rArr; find_file &rArr; fsUnicodeWildCardCompare &rArr; fsUnicodeCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>__find_next</STRONG> (ARM, 32 bytes, Stack size 16 bytes, nvtfat_fop.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = __find_next &rArr; find_fileEx &rArr; find_file &rArr; fsUnicodeWildCardCompare &rArr; fsUnicodeCopyStr
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fileEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>__find_close</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nvtfat_fop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>__fioctl</STRONG> (ARM, 12 bytes, Stack size 0 bytes, nvtfat_fop.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nvtfat_fop.o(.data)
</UL>
<P><STRONG><a name="[25d]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[25c]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[25b]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[25e]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[50]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[246]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[253]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[23d]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[23e]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
